<?xml version="1.0" encoding="UTF-8"?>
<rcf name="ccda_ruleset" version="1.0">
  <rulegroup name="MISRA Cpp Rules">
    <rule help="" active="yes" id="MCPP Rule 0">
      <text>Language independent issues</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 0-1">
          <text>Unnecessary constructs</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 0-1-1">
              <text> A project shall not contain unreachable code.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2880" />
                <message mapped="yes" component="qacpp" id="2881" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-2">
              <text> A project shall not contain infeasible paths.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2991" />
                <message mapped="yes" component="qacpp" id="2992" />
                <message mapped="yes" component="qacpp" id="2994" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-3">
              <text> A project shall not contain unused variables.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1500" />
                <message mapped="yes" component="rcma" id="1502" />
                <message mapped="yes" component="qacpp" id="4208" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-4">
              <text> A project shall not contain non-volatile POD variables having only one use.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4208" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-5">
              <text> A project shall not contain unused type declarations.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1755" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-6">
              <text> A project shall not contain instances of non-volatile variables being given values that are never subsequently used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2982" />
                <message mapped="yes" component="qacpp" id="2983" />
                <message mapped="yes" component="qacpp" id="4208" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-7">
              <text> The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3802" />
                <message mapped="yes" component="qacpp" id="3803" />
                <message mapped="yes" component="qacpp" id="3804" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-8">
              <text> All functions with void return type shall have external side effect(s).</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4649" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-9">
              <text> There shall be no dead code.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2981" />
                <message mapped="yes" component="qacpp" id="2982" />
                <message mapped="yes" component="qacpp" id="2983" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-1-10">
              <text> Every defined function shall be called at least once.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1503" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 0-2">
          <text>Storage</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 0-2-1">
              <text> An object shall not be assigned to an overlapping object.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2776" />
                <message mapped="yes" component="qacpp" id="2777" />
                <message mapped="yes" component="qacpp" id="2778" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 0-3">
          <text>Runtime Failures</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 0-3-1">
              <text> Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques (b) dynamic analysis tools/techniques (c) explicit coding of checks to handle run-time faults.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2776" />
                <message mapped="yes" component="qacpp" id="2777" />
                <message mapped="yes" component="qacpp" id="2778" />
                <message mapped="yes" component="qacpp" id="2791" />
                <message mapped="yes" component="qacpp" id="2792" />
                <message mapped="yes" component="qacpp" id="2793" />
                <message mapped="yes" component="qacpp" id="2800" />
                <message mapped="yes" component="qacpp" id="2801" />
                <message mapped="yes" component="qacpp" id="2802" />
                <message mapped="yes" component="qacpp" id="2803" />
                <message mapped="yes" component="qacpp" id="2810" />
                <message mapped="yes" component="qacpp" id="2811" />
                <message mapped="yes" component="qacpp" id="2812" />
                <message mapped="yes" component="qacpp" id="2813" />
                <message mapped="yes" component="qacpp" id="2820" />
                <message mapped="yes" component="qacpp" id="2821" />
                <message mapped="yes" component="qacpp" id="2822" />
                <message mapped="yes" component="qacpp" id="2823" />
                <message mapped="yes" component="qacpp" id="2831" />
                <message mapped="yes" component="qacpp" id="2832" />
                <message mapped="yes" component="qacpp" id="2833" />
                <message mapped="yes" component="qacpp" id="2840" />
                <message mapped="yes" component="qacpp" id="2841" />
                <message mapped="yes" component="qacpp" id="2842" />
                <message mapped="yes" component="qacpp" id="2843" />
                <message mapped="yes" component="qacpp" id="2861" />
                <message mapped="yes" component="qacpp" id="2862" />
                <message mapped="yes" component="qacpp" id="2863" />
                <message mapped="yes" component="qacpp" id="2925" />
                <message mapped="yes" component="qacpp" id="2926" />
                <message mapped="yes" component="qacpp" id="2935" />
                <message mapped="yes" component="qacpp" id="2936" />
                <message mapped="yes" component="qacpp" id="2937" />
                <message mapped="yes" component="qacpp" id="2938" />
                <message mapped="yes" component="qacpp" id="2961" />
                <message mapped="yes" component="qacpp" id="2962" />
                <message mapped="yes" component="qacpp" id="2963" />
                <message mapped="yes" component="qacpp" id="2971" />
                <message mapped="yes" component="qacpp" id="2972" />
                <message mapped="yes" component="qacpp" id="2973" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 0-3-2">
              <text> If a function generates error information, then that error information shall be tested.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4126" />
                <message mapped="yes" component="qacpp" id="4127" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 0-4">
          <text>Arithmetic</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 0-4-1">
              <text> Use of scaled-integer or fixed-point arithmetic shall be documented.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 0-4-2">
              <text> Use of floating-point arithmetic shall be documented.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 0-4-3">
              <text> Floating-point implementations shall comply with a defined floatingpoint standard.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 1">
      <text>General</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 1-0">
          <text>Language</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 1-0-2">
              <text> Multiple compilers shall only be used if they have a common, defined interface.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 1-0-3">
              <text> The implementation of integer division in the chosen compiler shall be determined and documented.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 2">
      <text>Lexical conventions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 2-2">
          <text>Character sets</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 2-2-1">
              <text> The character set and the corresponding encoding shall be documented.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 2-3">
          <text>Trigraph sequences</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 2-3-1">
              <text> Trigraphs shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1092" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 2-5">
          <text>Alternative tokens</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 2-5-1">
              <text> Digraphs should not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1093" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 2-7">
          <text>Comments</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 2-7-1">
              <text> The character sequence /* shall not be used within a C-style comment.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1053" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 2-7-2">
              <text> Sections of code shall not be “commented out” using C-style comments.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1052" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 2-7-3">
              <text> Sections of code should not be “commented out” using C++ comments.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1051" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 2-10">
          <text>Identifiers</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 2-10-1">
              <text> Different identifiers shall be typographically unambiguous.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 2-10-2">
              <text> Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2500" />
                <message mapped="yes" component="qacpp" id="2501" />
                <message mapped="yes" component="qacpp" id="2502" />
                <message mapped="yes" component="qacpp" id="2503" />
                <message mapped="yes" component="qacpp" id="2504" />
                <message mapped="yes" component="qacpp" id="2505" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 2-10-6">
              <text> If an identifier refers to a type, it shall not also refer to an object or a function in the same scope.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2501" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 2-13">
          <text>Literals</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 2-13-2">
              <text> Octal constants (other than zero) and octal escape sequences (other than “\0”) shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3600" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 2-13-3">
              <text> A “U” suffix shall be applied to all octal or hexadecimal integer literals of unsigned type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3604" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 2-13-4">
              <text> Literal suffixes shall be upper case.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5053" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 2-13-5">
              <text> Narrow and wide string literals shall not be concatenated.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0635" />
                <message mapped="yes" component="qacpp" id="0636" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 3">
      <text>Basic concepts</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 3-1">
          <text>Declarations and definitions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 3-1-1">
              <text> It shall be possible to include any header file in multiple translation units without violating the One Definition Rule.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1067" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-1-2">
              <text> Functions shall not be declared at block scope.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2510" />
                <message mapped="yes" component="qacpp" id="2511" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-1-3">
              <text> When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2430" />
                <message mapped="yes" component="qacpp" id="2431" />
                <message mapped="yes" component="qacpp" id="2432" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 3-2">
          <text>One Definition Rule</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 3-2-1">
              <text> All declarations of an object or function shall have compatible types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0131" />
                <message mapped="yes" component="rcma" id="1510" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-2-2">
              <text> The One Definition Rule shall not be violated.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1509" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-2-3">
              <text> A type, object or function that is used in multiple translation units shall be declared in one and only one file.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1508" />
                <message mapped="yes" component="rcma" id="1512" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-2-4">
              <text> An identifier with external linkage shall have exactly one definition.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1509" />
                <message mapped="yes" component="rcma" id="1752" />
                <message mapped="yes" component="rcma" id="1753" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 3-3">
          <text>Declarative regions and scope</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 3-3-1">
              <text> Objects or functions with external linkage shall be declared in a header file.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2641" />
                <message mapped="yes" component="qacpp" id="2642" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-3-2">
              <text> If a function has internal linkage then all re-declarations shall include the static storage class specifier.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2050" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 3-4">
          <text>Name lookup</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 3-4-1">
              <text> An identifier declared to be an object or type shall be defined in a block that minimizes its visibility.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1531" />
                <message mapped="yes" component="rcma" id="1533" />
                <message mapped="yes" component="qacpp" id="4113" />
                <message mapped="yes" component="qacpp" id="4114" />
                <message mapped="yes" component="qacpp" id="4141" />
                <message mapped="yes" component="qacpp" id="4142" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 3-9">
          <text>Types</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 3-9-1">
              <text> The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2664" />
                <message mapped="yes" component="qacpp" id="2665" />
                <message mapped="yes" component="qacpp" id="2666" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-9-2">
              <text> typedefs that indicate size and signedness should be used in place of the basic numerical types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2427" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 3-9-3">
              <text> The underlying bit representations of floating-point values shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2406" />
                <message mapped="yes" component="qacpp" id="2407" />
                <message mapped="yes" component="qacpp" id="3017" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 4">
      <text>Standard conversions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 4-5">
          <text>Integral promotions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 4-5-1">
              <text> Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3709" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 4-5-2">
              <text> Expressions with type enum shall not be used as operands to builtin operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3710" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 4-5-3">
              <text> Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3711" />
                <message mapped="yes" component="qacpp" id="3712" />
                <message mapped="yes" component="qacpp" id="3713" />
                <message mapped="yes" component="qacpp" id="3714" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 4-10">
          <text>Pointer conversions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 4-10-1">
              <text> NULL shall not be used as an integer value.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3122" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 5">
      <text>Expressions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 5-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-0-1">
              <text> The value of an expression shall be the same under any order of evaluation that the standard permits.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3220" />
                <message mapped="yes" component="qacpp" id="3221" />
                <message mapped="yes" component="qacpp" id="3222" />
                <message mapped="yes" component="qacpp" id="3223" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-2">
              <text> Limited dependence should be placed on C++ operator precedence</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3700" />
                <message mapped="yes" component="qacpp" id="3702" />
                <message mapped="yes" component="qacpp" id="3703" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-3">
              <text> A cvalue expression shall not be implicitly converted to a different underlying type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3130" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-4">
              <text> An implicit integral conversion shall not change the signedness of the underlying type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3000" />
                <message mapped="yes" component="qacpp" id="3139" />
                <message mapped="yes" component="qacpp" id="3140" />
                <message mapped="yes" component="qacpp" id="3143" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-5">
              <text> There shall be no implicit floating-integral conversions.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3011" />
                <message mapped="yes" component="qacpp" id="3015" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-6">
              <text> An implicit integral or floating-point conversion shall not reduce the size of the underlying type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3010" />
                <message mapped="yes" component="qacpp" id="3012" />
                <message mapped="yes" component="qacpp" id="3014" />
                <message mapped="yes" component="qacpp" id="3018" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-7">
              <text> There shall be no explicit floating-integral conversions of a cvalue expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3131" />
                <message mapped="yes" component="qacpp" id="3132" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-8">
              <text> An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3133" />
                <message mapped="yes" component="qacpp" id="3134" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-9">
              <text> An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3135" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-10">
              <text> If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3136" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-11">
              <text> The plain char type shall only be used for the storage and use of character values.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3137" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-12">
              <text> signed char and unsigned char type shall only be used for the storage and use of numeric values.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3715" />
                <message mapped="yes" component="qacpp" id="3716" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-13">
              <text> The condition of an if-statement and the condition of an iterationstatement shall have type bool.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3054" />
                <message mapped="yes" component="qacpp" id="4077" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-14">
              <text> The first operand of a conditional-operator shall have type bool.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3054" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-15">
              <text> Array indexing shall be the only form of pointer arithmetic.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3705" />
                <message mapped="yes" component="qacpp" id="3706" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-16">
              <text> A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2930" />
                <message mapped="yes" component="qacpp" id="2931" />
                <message mapped="yes" component="qacpp" id="2932" />
                <message mapped="yes" component="qacpp" id="2933" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-17">
              <text> Subtraction between pointers shall only be applied to pointers that address elements of the same array.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2668" />
                <message mapped="yes" component="qacpp" id="2771" />
                <message mapped="yes" component="qacpp" id="2772" />
                <message mapped="yes" component="qacpp" id="2773" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-18">
              <text> &gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2669" />
                <message mapped="yes" component="qacpp" id="2771" />
                <message mapped="yes" component="qacpp" id="2772" />
                <message mapped="yes" component="qacpp" id="2773" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-19">
              <text> The declaration of objects shall contain no more than two levels of pointer indirection.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2424" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-20">
              <text> Non-constant operands to a binary bitwise operator shall have the same underlying type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3138" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-0-21">
              <text> Bitwise operators shall only be applied to operands of unsigned underlying type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3003" />
                <message mapped="yes" component="qacpp" id="3004" />
                <message mapped="yes" component="qacpp" id="3006" />
                <message mapped="yes" component="qacpp" id="3321" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-2">
          <text>Postfix expressions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-2-1">
              <text> Each operand of a logical &amp;&amp; or || shall be a postfix‑expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3700" />
                <message mapped="yes" component="qacpp" id="3701" />
                <message mapped="yes" component="qacpp" id="3702" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-2">
              <text> A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3095" />
                <message mapped="yes" component="qacpp" id="3096" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-3">
              <text> Casts from a base class to a derived class should not be performed on polymorphic types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3070" />
                <message mapped="yes" component="qacpp" id="3076" />
                <message mapped="yes" component="qacpp" id="3077" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-5">
              <text> A cast shall not remove any const or volatile qualification from the type of a pointer or reference.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3060" />
                <message mapped="yes" component="qacpp" id="3061" />
                <message mapped="yes" component="qacpp" id="3066" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-6">
              <text> A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3048" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-7">
              <text> An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3085" />
                <message mapped="yes" component="qacpp" id="3086" />
                <message mapped="yes" component="qacpp" id="3087" />
                <message mapped="yes" component="qacpp" id="3088" />
                <message mapped="yes" component="qacpp" id="3089" />
                <message mapped="yes" component="qacpp" id="3090" />
                <message mapped="yes" component="qacpp" id="3091" />
                <message mapped="yes" component="qacpp" id="3092" />
                <message mapped="yes" component="qacpp" id="3093" />
                <message mapped="yes" component="qacpp" id="3094" />
                <message mapped="yes" component="qacpp" id="3103" />
                <message mapped="yes" component="qacpp" id="3105" />
                <message mapped="yes" component="qacpp" id="3106" />
                <message mapped="yes" component="qacpp" id="3107" />
                <message mapped="yes" component="qacpp" id="3108" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-8">
              <text> An object with integer type or pointer to void type shall not be converted to an object with pointer type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3041" />
                <message mapped="yes" component="qacpp" id="3043" />
                <message mapped="yes" component="qacpp" id="3045" />
                <message mapped="yes" component="qacpp" id="3047" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-9">
              <text> A cast should not convert a pointer type to an integral type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3040" />
                <message mapped="yes" component="qacpp" id="3042" />
                <message mapped="yes" component="qacpp" id="3044" />
                <message mapped="yes" component="qacpp" id="3046" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-10">
              <text> The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3360" />
                <message mapped="yes" component="qacpp" id="3361" />
                <message mapped="yes" component="qacpp" id="3362" />
                <message mapped="yes" component="qacpp" id="3363" />
                <message mapped="yes" component="qacpp" id="3364" />
                <message mapped="yes" component="qacpp" id="3365" />
                <message mapped="yes" component="qacpp" id="3366" />
                <message mapped="yes" component="qacpp" id="3367" />
                <message mapped="yes" component="qacpp" id="3368" />
                <message mapped="yes" component="qacpp" id="3369" />
                <message mapped="yes" component="qacpp" id="3370" />
                <message mapped="yes" component="qacpp" id="3371" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-11">
              <text> The comma operator, &amp;&amp; operator and the || operator shall not be overloaded.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2077" />
                <message mapped="yes" component="qacpp" id="2078" />
                <message mapped="yes" component="qacpp" id="2079" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-2-12">
              <text> An identifier with array type passed as a function argument shall not decay to a pointer.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3840" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-3">
          <text>Unary expressions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-3-1">
              <text> Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3054" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-3-2">
              <text> The unary minus operator shall not be applied to an expression whose underlying type is unsigned.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3002" />
                <message mapped="yes" component="qacpp" id="3005" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-3-3">
              <text> The unary &amp; operator shall not be overloaded.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2092" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 5-3-4">
              <text> Evaluation of the operand to the sizeof operator shall not contain side effects.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3240" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-8">
          <text>Shift operators</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-8-1">
              <text> The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2791" />
                <message mapped="yes" component="qacpp" id="2792" />
                <message mapped="yes" component="qacpp" id="2793" />
                <message mapped="yes" component="qacpp" id="3322" />
                <message mapped="yes" component="qacpp" id="3323" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-14">
          <text>Logical AND operator</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-14-1">
              <text> The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3230" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-17">
          <text>Assignment operators</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-17-1">
              <text> The semantic equivalence between a binary operator and its assignment operator form shall be preserved.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4222" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-18">
          <text>Comma operator</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-18-1">
              <text> The comma operator shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3340" />
                <message mapped="yes" component="qacpp" id="3341" />
                <message mapped="yes" component="qacpp" id="3348" />
                <message mapped="yes" component="qacpp" id="3349" />
                <message mapped="yes" component="qacpp" id="3352" />
                <message mapped="yes" component="qacpp" id="3353" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 5-19">
          <text>Constant expressions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 5-19-1">
              <text> Evaluation of constant unsigned integer expressions should not lead to wrap-around.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2910" />
                <message mapped="yes" component="qacpp" id="2911" />
                <message mapped="yes" component="qacpp" id="2912" />
                <message mapped="yes" component="qacpp" id="2913" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 6">
      <text>Statements</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 6-2">
          <text>Expression statements</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 6-2-1">
              <text> Assignment operators shall not be used in sub-expressions.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3902" />
                <message mapped="yes" component="qacpp" id="3903" />
                <message mapped="yes" component="qacpp" id="3904" />
                <message mapped="yes" component="qacpp" id="3905" />
                <message mapped="yes" component="qacpp" id="4071" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-2-2">
              <text> Floating-point expressions shall not be directly or indirectly tested for equality or inequality.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3270" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-2-3">
              <text> Before preprocessing, a null statement shall only occur on a line by itself</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4500" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 6-3">
          <text>Compound statements</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 6-3-1">
              <text> The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4062" />
                <message mapped="yes" component="qacpp" id="4063" />
                <message mapped="yes" component="qacpp" id="4064" />
                <message mapped="yes" component="qacpp" id="4065" />
                <message mapped="yes" component="qacpp" id="4066" />
                <message mapped="yes" component="qacpp" id="4068" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 6-4">
          <text>Selection statements</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 6-4-1">
              <text> An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4060" />
                <message mapped="yes" component="qacpp" id="4061" />
                <message mapped="yes" component="qacpp" id="4068" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-4-2">
              <text> All if … else if constructs shall be terminated with an else clause.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4070" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-4-3">
              <text> A switch statement shall be a well-formed switch statement.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 6-4-4">
              <text> A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4013" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-4-5">
              <text> An unconditional throw or break statement shall terminate every non‑empty switch-clause.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4011" />
                <message mapped="yes" component="qacpp" id="4612" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-4-6">
              <text> The final clause of a switch statement shall be the default-clause.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4010" />
                <message mapped="yes" component="qacpp" id="4012" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-4-7">
              <text> The condition of a switch statement shall not have bool type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4015" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-4-8">
              <text> Every switch statement shall have at least one case-clause.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4016" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 6-5">
          <text>Iteration statements</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 6-5-1">
              <text> A for loop shall contain a single loop-counter which shall not have floating type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4232" />
                <message mapped="yes" component="qacpp" id="4234" />
                <message mapped="yes" component="qacpp" id="4243" />
                <message mapped="yes" component="qacpp" id="4244" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-5-2">
              <text> If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4294" />
                <message mapped="yes" component="qacpp" id="4299" />
                <message mapped="yes" component="qacpp" id="4680" />
                <message mapped="yes" component="qacpp" id="4681" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-5-3">
              <text> The loop-counter shall not be modified within condition or statement.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4235" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-5-4">
              <text> The loop-counter shall be modified by one of: --, ++, -=n, or +=n</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4295" />
                <message mapped="yes" component="qacpp" id="4296" />
                <message mapped="yes" component="qacpp" id="4297" />
                <message mapped="yes" component="qacpp" id="4298" />
                <message mapped="yes" component="qacpp" id="4682" />
                <message mapped="yes" component="qacpp" id="4683" />
                <message mapped="yes" component="qacpp" id="4684" />
                <message mapped="yes" component="qacpp" id="4685" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-5-5">
              <text> A loop-control-variable other than the loop-counter shall not be modified within condition or expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4231" />
                <message mapped="yes" component="qacpp" id="4290" />
                <message mapped="yes" component="qacpp" id="4292" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 6-5-6">
              <text> A loop-control-variable other than the loop-counter which is modified in statement shall have type bool.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4232" />
                <message mapped="yes" component="qacpp" id="4243" />
                <message mapped="yes" component="qacpp" id="4244" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 6-6">
          <text>Jump statements</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 6-6-3">
              <text> The continue statement shall only be used within a well-formed for loop.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4600" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 7">
      <text>Declarations</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 7-1">
          <text>Specifiers</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 7-1-1">
              <text> A variable which is not modified shall be const qualified.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4117" />
                <message mapped="yes" component="qacpp" id="4119" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-1-2">
              <text> A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4213" />
                <message mapped="yes" component="qacpp" id="4673" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 7-2">
          <text>Enumeration declarations</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 7-2-1">
              <text> An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3013" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 7-3">
          <text>Namespaces</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 7-3-1">
              <text> The global namespace shall only contain main, namespace declarations and extern "C" declarations.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2000" />
                <message mapped="yes" component="qacpp" id="2300" />
                <message mapped="yes" component="qacpp" id="2400" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-3-2">
              <text> The identifier main shall not be used for a function other than the global function main.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2040" />
                <message mapped="yes" component="qacpp" id="2041" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-3-3">
              <text> There shall be no unnamed namespaces in header files.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2518" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-3-4">
              <text> using-directives shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2519" />
                <message mapped="yes" component="qacpp" id="2520" />
                <message mapped="yes" component="qacpp" id="2522" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-3-5">
              <text> Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2525" />
                <message mapped="yes" component="qacpp" id="2526" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-3-6">
              <text> using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2521" />
                <message mapped="yes" component="qacpp" id="2522" />
                <message mapped="yes" component="qacpp" id="2523" />
                <message mapped="yes" component="qacpp" id="2524" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 7-4">
          <text>The asm declaration</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 7-4-1">
              <text> All usage of assembler shall be documented.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 7-4-2">
              <text> Assembler instructions shall only be introduced using the asm declaration.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0014" />
                <message mapped="yes" component="qacpp" id="0029" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-4-3">
              <text> Assembly language shall be encapsulated and isolated.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 7-5">
          <text>Linkage specifications</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 7-5-1">
              <text> A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4026" />
                <message mapped="yes" component="qacpp" id="4027" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-5-2">
              <text> The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2515" />
                <message mapped="yes" component="qacpp" id="2516" />
                <message mapped="yes" component="qacpp" id="2527" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-5-3">
              <text> A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4028" />
                <message mapped="yes" component="qacpp" id="4624" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 7-5-4">
              <text> Functions should not call themselves, either directly or indirectly.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1520" />
                <message mapped="yes" component="rcma" id="1521" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 8">
      <text>Declarators</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 8-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 8-0-1">
              <text> An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4107" />
                <message mapped="yes" component="qacpp" id="4108" />
                <message mapped="yes" component="qacpp" id="4109" />
                <message mapped="yes" component="qacpp" id="4110" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 8-3">
          <text>Meaning of declarators</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 8-3-1">
              <text> Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2018" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 8-4">
          <text>Function definitions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 8-4-1">
              <text> Functions shall not be defined using the ellipsis notation.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2012" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 8-4-2">
              <text> The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2017" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 8-4-3">
              <text> All exit paths from a function with non-void return type shall have an explicit return statement with an expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2888" />
                <message mapped="yes" component="qacpp" id="4022" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 8-4-4">
              <text> A function identifier shall either be used to call the function or it shall be preceded by &amp;.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3058" />
                <message mapped="yes" component="qacpp" id="3059" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 8-5">
          <text>Initializers</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 8-5-1">
              <text> All variables shall have a defined value before they are used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2961" />
                <message mapped="yes" component="qacpp" id="2962" />
                <message mapped="yes" component="qacpp" id="2963" />
                <message mapped="yes" component="qacpp" id="2971" />
                <message mapped="yes" component="qacpp" id="2972" />
                <message mapped="yes" component="qacpp" id="2973" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 8-5-2">
              <text> Braces shall be used to indicate and match the structure in the nonzero initialization of arrays and structures.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2412" />
                <message mapped="yes" component="qacpp" id="2416" />
                <message mapped="yes" component="qacpp" id="2417" />
                <message mapped="yes" component="qacpp" id="2418" />
                <message mapped="yes" component="qacpp" id="2420" />
                <message mapped="yes" component="qacpp" id="2421" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 8-5-3">
              <text> In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2422" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 9">
      <text>Classes</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 9-3">
          <text>Member functions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 9-3-1">
              <text> const member functions shall not return non-const pointers or references to class-data.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4623" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 9-3-2">
              <text> Member functions shall not return non-const handles to class-data.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4625" />
                <message mapped="yes" component="qacpp" id="4627" />
                <message mapped="yes" component="qacpp" id="4628" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 9-3-3">
              <text> If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4211" />
                <message mapped="yes" component="qacpp" id="4212" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 9-5">
          <text>Unions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 9-5-1">
              <text> Unions shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2176" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 9-6">
          <text>Bit-fields</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 9-6-1">
              <text> When the absolute positioning of bits representing a bit-field is required, then the behaviour and packing of bit-fields shall be documented.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 9-6-4">
              <text> Named bit-fields with signed integer type shall have a length of more than one bit.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2302" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 10">
      <text>Derived classes</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 10-1">
          <text>Multiple base classes</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 10-1-1">
              <text> Classes should not be derived from virtual bases.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2650" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 10-1-2">
              <text> A base class shall only be declared virtual if it is used in a diamond hierarchy.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1703" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 10-1-3">
              <text> An accessible base class shall not be both virtual and non-virtual in the same hierarchy.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2151" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 10-2">
          <text>Member name lookup</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 10-2-1">
              <text> All accessible entity names within a multiple inheritance hierarchy should be unique.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2150" />
                <message mapped="yes" component="qacpp" id="2159" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 10-3">
          <text>Virtual functions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 10-3-1">
              <text> There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2127" />
                <message mapped="yes" component="qacpp" id="2128" />
                <message mapped="yes" component="qacpp" id="2129" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 10-3-3">
              <text> A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2126" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 11">
      <text>Member access control</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 11-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 11-0-1">
              <text> Member data in non-POD class types shall be private.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2100" />
                <message mapped="yes" component="qacpp" id="2101" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 12">
      <text>Special member functions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 12-1">
          <text>Constructors</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 12-1-1">
              <text> An object’s dynamic type shall not be used from the body of its constructor or destructor.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4260" />
                <message mapped="yes" component="qacpp" id="4261" />
                <message mapped="yes" component="qacpp" id="4273" />
                <message mapped="yes" component="qacpp" id="4274" />
                <message mapped="yes" component="qacpp" id="4275" />
                <message mapped="yes" component="qacpp" id="4276" />
                <message mapped="yes" component="qacpp" id="4277" />
                <message mapped="yes" component="qacpp" id="4278" />
                <message mapped="yes" component="qacpp" id="4279" />
                <message mapped="yes" component="qacpp" id="4280" />
                <message mapped="yes" component="qacpp" id="4281" />
                <message mapped="yes" component="qacpp" id="4282" />
                <message mapped="yes" component="qacpp" id="4690" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 12-1-2">
              <text> All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4052" />
                <message mapped="yes" component="qacpp" id="4054" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 12-1-3">
              <text> All constructors that are callable with a single argument of fundamental type shall be declared explicit.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2180" />
                <message mapped="yes" component="qacpp" id="3050" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 12-8">
          <text>Copying class objects</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 13">
      <text>N.A.</text>
      <enforcement />
    </rule>
    <rule help="" active="yes" id="MCPP Rule 14">
      <text>Templates</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 14-5">
          <text>Template declarations</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 14-5-1">
              <text> A non-member generic function shall only be declared in a namespace that is not an associated namespace.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2087" />
                <message mapped="yes" component="qacpp" id="3336" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 14-5-2">
              <text> A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2638" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 14-5-3">
              <text> A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2639" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 14-6">
          <text>Name resolution</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 14-6-1">
              <text> In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0467" />
                <message mapped="yes" component="qacpp" id="0468" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 14-6-2">
              <text> The function chosen by overload resolution shall resolve to a function declared previously in the translation unit.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2088" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 14-7">
          <text>Template instantiation and specialization</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 14-7-1">
              <text> All class templates, function templates, class template member functions and class template static members shall be instantiated at least once.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 14-7-2">
              <text> For any given template specialization, an explicit instantiation of the template with the template-arguments used in the specialization shall not render the program ill-formed.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 14-7-3">
              <text> All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template.</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1730" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 14-8">
          <text>Function template specialization</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 14-8-1">
              <text> Overloaded function templates shall not be explicitly specialized.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3843" />
                <message mapped="yes" component="qacpp" id="3844" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 14-8-2">
              <text> The viable function set for a function call should either contain no function specializations, or only contain function specializations.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3800" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 15">
      <text>Exception Handling</text>
      <enforcement />
    </rule>
    <rule help="" active="yes" id="MCPP Rule 16">
      <text>Preprocessing directives</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 16-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 16-0-1">
              <text> #include directives in a file shall only be preceded by other preprocessor directives or comments.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5026" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-2">
              <text> Macros shall only be #define’d or #undef’d in the global namespace.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1034" />
                <message mapped="yes" component="qacpp" id="1035" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-3">
              <text> #undef shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0055" />
                <message mapped="yes" component="qacpp" id="1032" />
                <message mapped="yes" component="qacpp" id="1033" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-4">
              <text> Function-like macros shall not be defined.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1020" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-5">
              <text> Arguments to a function-like macro shall not contain tokens that look like preprocessing directives.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1072" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-6">
              <text> In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1030" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-7">
              <text> Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1036" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-0-8">
              <text> If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0040" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 16-1">
          <text>Conditional inclusion</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 16-1-1">
              <text> The defined preprocessor operator shall only be used in one of the two standard forms.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0022" />
                <message mapped="yes" component="qacpp" id="0611" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-1-2">
              <text> All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0021" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 16-2">
          <text>Source file inclusion</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 16-2-1">
              <text> The pre-processor shall only be used for file inclusion and include guards.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1020" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-2-2">
              <text> C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1021" />
                <message mapped="yes" component="qacpp" id="1025" />
                <message mapped="yes" component="qacpp" id="1026" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-2-3">
              <text> Include guards shall be provided.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1000" />
                <message mapped="yes" component="qacpp" id="1001" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-2-4">
              <text> The ', ", /* or // characters shall not occur in a header file name.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1016" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-2-5">
              <text> The \ character should not occur in a header file name.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1017" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-2-6">
              <text> The #include directive shall be followed by either a &lt;filename&gt; or "filename" sequence.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0032" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 16-3">
          <text>Macro replacement</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 16-3-1">
              <text> There shall be at most one occurrence of the # or ## operators in a single macro definition.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1110" />
                <message mapped="yes" component="qacpp" id="1111" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 16-3-2">
              <text> The # and ## operators should not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1038" />
                <message mapped="yes" component="qacpp" id="1039" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 16-6">
          <text>Pragma directive</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 16-6-1">
              <text> All uses of the #pragma directive shall be documented.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 17">
      <text>Library introduction</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 17-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 17-0-1">
              <text> Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5171" />
                <message mapped="yes" component="mcpp" id="5172" />
                <message mapped="yes" component="mcpp" id="5173" />
                <message mapped="yes" component="mcpp" id="5174" />
                <message mapped="yes" component="mcpp" id="5175" />
                <message mapped="yes" component="mcpp" id="5176" />
                <message mapped="yes" component="mcpp" id="5177" />
                <message mapped="yes" component="mcpp" id="5178" />
                <message mapped="yes" component="mcpp" id="5179" />
                <message mapped="yes" component="mcpp" id="5180" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 17-0-2">
              <text> The names of standard library macros and objects shall not be reused.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5181" />
                <message mapped="yes" component="mcpp" id="5182" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 17-0-3">
              <text> The names of standard library functions shall not be overridden.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5183" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 17-0-4">
              <text> All library code shall conform to MISRA C++.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule 17-0-5">
              <text> The setjmp macro and the longjmp function shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5020" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 18">
      <text>Language support library</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 18-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 18-0-1">
              <text> The C library shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1014" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 18-0-2">
              <text> The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5023" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 18-0-3">
              <text> The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5024" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 18-0-4">
              <text> The time handling functions of library &lt;ctime&gt; shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5025" />
                <message mapped="yes" component="mcpp" id="5186" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule 18-0-5">
              <text> The unbounded functions of library &lt;cstring&gt; shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5029" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 18-2">
          <text>Implementation properties</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 18-2-1">
              <text> The macro offsetof shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5018" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 18-4">
          <text>Dynamic memory management</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 18-4-1">
              <text> Dynamic heap memory allocation shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5118" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule 18-7">
          <text>Other runtime support</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 18-7-1">
              <text> The signal handling facilities of &lt;csignal&gt; shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5123" />
                <message mapped="yes" component="mcpp" id="5187" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 19">
      <text>Diagnostics library</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 19-3">
          <text>Error numbers</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 19-3-1">
              <text> The error indicator errno shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3224" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="MCPP Rule 27">
      <text>Input/output library</text>
      <enforcement>
        <rule help="" active="yes" id="Rule 27-0">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="Rule 27-0-1">
              <text> The stream input/output library &lt;cstdio&gt; shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5127" />
                <message mapped="yes" component="mcpp" id="5188" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
  <rulegroup name="IVS Cpp Rules">
    <rule help="" active="yes" id="2">
      <text>Class</text>
      <enforcement>
        <rule help="" active="yes" id="2.1">
          <text>General</text>
          <enforcement>
            <rule help="" active="yes" id="2.1.2">
              <text> If a class has a raw pointer member, make the intended copy and delete operations explicit.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="2.1.4">
              <text> Only inline simple and non virtual functions, such as one line getters and setters.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="2.1.5">
              <text> Declare ’const’ any class member function that does not modify the externally visible state of the object.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4211" />
                <message mapped="yes" component="qacpp" id="4212" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.1.6">
              <text> Behaviour should be implemented by only one member function in a class.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="2.1.7">
              <text> Do not declare implicit conversion operators to fundamental or class types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2181" />
                <message mapped="yes" component="qacpp" id="3050" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="2.2">
          <text>Constructors and Destructors</text>
          <enforcement>
            <rule help="" active="yes" id="2.2.1">
              <text> Ensure all constructors supply an initial value (or invoke a constructor) for each virtual base class, each non virtual base class and all non-static data members.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="2.2.2">
              <text> Write members in an initialisation list in the order in which they are declared.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4053" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.2.5">
              <text> Use the "Ressource Acquisition Is Initialisation" (RAII) idiom where possible.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="2.3">
          <text>Inheritance</text>
          <enforcement>
            <rule help="" active="yes" id="2.3.1">
              <text> Use public derivation only.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2193" />
                <message mapped="yes" component="qacpp" id="2194" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.3.2">
              <text> Write a ’virtual’ destructor or a ’protected’ destructor for base classes.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2116" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.3.3">
              <text> Do not downcast base class object pointers to derived class pointers.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3070" />
                <message mapped="yes" component="qacpp" id="3076" />
                <message mapped="yes" component="qacpp" id="3077" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.3.4">
              <text> Override all overloads of a base class virtual function.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2120" />
                <message mapped="yes" component="qacpp" id="3820" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.3.8">
              <text> Ensure that the return type of the virtual function being overridden is compatible.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2139" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.3.9">
              <text> Do not override or hide inherited non-virtual functions.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2121" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.3.10">
              <text> When redeclaring and overriding functions use the same default parameter values as in other declarations.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2018" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="2.4">
          <text>Object Oriented Design</text>
          <enforcement>
            <rule help="" active="yes" id="2.4.4">
              <text> Usage of friend classes is not allowed.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2107" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="2.4.5">
              <text> All members of a public base class must be valid for a derived class.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="2.4.6">
              <text> Differentiate among member functions, non-member functions and friend functions.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="2.5">
          <text>Operator Overloading</text>
          <enforcement>
            <rule help="" active="yes" id="2.5.3">
              <text> Ensure that overloaded binary operators have expected behaviour.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2071" />
                <message mapped="yes" component="qacpp" id="2072" />
                <message mapped="yes" component="qacpp" id="2073" />
                <message mapped="yes" component="qacpp" id="4222" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="3">
      <text>Complexity</text>
      <enforcement>
        <rule help="" active="yes" id="3.0">
          <text>Complexity</text>
          <enforcement>
            <rule help="" active="yes" id="3.0.1">
              <text> Do not write functions with an excessive MCCABE Cyclomatic Complexity.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="6040" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="3.0.2">
              <text> Avoid functions with a high static program path count.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="6041" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="3.0.3">
              <text> Avoid functions with many arguments.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="6042" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="3.0.4">
              <text> Avoid functions with an excessive nesting depth.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="6043" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="3.0.5">
              <text> Avoid functions with an excessive length.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="6044" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="4">
      <text>Control Flow</text>
      <enforcement>
        <rule help="" active="yes" id="4.0">
          <text>Control Flow</text>
          <enforcement>
            <rule help="" active="yes" id="4.0.6">
              <text> Do not use ’goto’.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4000" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.0.8">
              <text> Declare for loop control variables within the for statement instead of using an existing variable.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4230" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.0.9">
              <text> Consider the number of exit points of a function under the aspects of "ressource leakage" and "understandability".</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="5">
      <text>Conversion</text>
      <enforcement>
        <rule help="" active="yes" id="5.0">
          <text>Conversion</text>
          <enforcement>
            <rule help="" active="yes" id="5.0.4">
              <text> Do not use pointer or reference casts.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3030" />
                <message mapped="yes" component="qacpp" id="3031" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="5.0.5">
              <text> Do not convert floating values to integral types except through use of (standard) library routines.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="6">
      <text>Declarations and Definitions</text>
      <enforcement>
        <rule help="" active="yes" id="6.1">
          <text>Structure</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="6.2">
          <text>Scope</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="6.3">
          <text>Language Restrictions</text>
          <enforcement>
            <rule help="" active="yes" id="6.3.2">
              <text> Do not use the ’extern’ keyword.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="6.4">
          <text>Object Declarations and Definitions</text>
          <enforcement>
            <rule help="" active="yes" id="6.4.1">
              <text> Initialise all scalar variables at definition. Never use a variable before it has been given a value.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4101" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="6.4.3">
              <text> Use SI unit types, class types or typedefs to indicate scalar quantities.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="6.4.5">
              <text> Do not use unbounded (C-style) aggregate types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2410" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="6.4.7">
              <text> Prefer to use signed numeric values, not unsigned.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="7">
      <text>Exceptions</text>
      <enforcement>
        <rule help="" active="yes" id="7.0">
          <text>Exceptions</text>
          <enforcement>
            <rule help="" active="yes" id="7.0.1">
              <text> Do not use exceptions in an embedded environment.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="8">
      <text>Expressions</text>
      <enforcement>
        <rule help="" active="yes" id="8.0">
          <text>Expressions</text>
          <enforcement>
            <rule help="" active="yes" id="8.0.1">
              <text> Use symbolic names instead of literal values in code. Do not use "magic" numbers.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4400" />
                <message mapped="yes" component="qacpp" id="4401" />
                <message mapped="yes" component="qacpp" id="4402" />
                <message mapped="yes" component="qacpp" id="4403" />
                <message mapped="yes" component="qacpp" id="4404" />
                <message mapped="yes" component="qacpp" id="4405" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="9">
      <text>Functions</text>
      <enforcement>
        <rule help="" active="yes" id="9.0">
          <text>Functions</text>
          <enforcement>
            <rule help="" active="yes" id="9.0.4">
              <text> Use "pass by reference" (or "pass by const-reference" for read-only parameters) in preference to "pass by value" for parameter types with a size greater than 16 bytes.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2008" />
                <message mapped="yes" component="qacpp" id="2009" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="9.0.7">
              <text> Enable the Return Value Optimization ("RVO").</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="9.0.9">
              <text> Declare trivial, very small and time-critical functions ’inline’.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="9.0.10">
              <text> Do not overload on both numeric and pointer types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2020" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="9.0.11">
              <text> Do not use default arguments with overloaded functions.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2016" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="10">
      <text>Dynamic Memory Management</text>
      <enforcement>
        <rule help="" active="yes" id="10.0">
          <text>Dynamic Memory Management</text>
          <enforcement>
            <rule help="" active="yes" id="10.0.1">
              <text> Do not use built-in dynamic memory functionality in embedded systems.</text>
              <enforcement>
                <message mapped="yes" component="mcpp" id="5118" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="11">
      <text>Portability</text>
      <enforcement>
        <rule help="" active="yes" id="11.0">
          <text>Portability</text>
          <enforcement>
            <rule help="" active="yes" id="11.0.1">
              <text> Use standard language features and standard library functions in preference to extra functionality provided by the operating system or environment.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="12">
      <text>Pre-Processor</text>
      <enforcement>
        <rule help="" active="yes" id="12.0">
          <text>Pre-Processor</text>
          <enforcement>
            <rule help="" active="yes" id="12.0.7">
              <text> Do NOT use the ’NULL’ macro.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1024" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="13">
      <text>Structures, Unions and Enumeration</text>
      <enforcement>
        <rule help="" active="yes" id="13.0">
          <text>Structures, Unions and Enumeration</text>
          <enforcement>
            <rule help="" active="yes" id="13.0.1">
              <text> Do not use variant structures (unions).</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2176" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="13.0.2">
              <text> Do not include member functions or access specifiers in struct types.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2171" />
                <message mapped="yes" component="qacpp" id="2173" />
                <message mapped="yes" component="qacpp" id="2175" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="14">
      <text>Templates</text>
      <enforcement>
        <rule help="" active="yes" id="14.0">
          <text>Templates</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="15">
      <text>Standard Template Library (STL)</text>
      <enforcement>
        <rule help="" active="yes" id="15.0">
          <text>Standard Template Library (STL)</text>
          <enforcement>
            <rule help="" active="yes" id="15.0.1">
              <text> Do not use STL components that handle with memory allocation and deallocation in embedded systems.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.3">
              <text> Use Standard Template Library containers and algorithms in preference to custom designs. Provide custom allocators if necessary.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.4">
              <text> Make copying efficient for objects in containers.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.5">
              <text> Where copying is expensive use containers of pointers or smart pointers.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.9">
              <text> Never create containers of auto_ptr.</text>
              <enforcement>
                <message mapped="yes" component="ascm" id="5210" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="15.0.17">
              <text> Minimise mixing of iterator types.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.18">
              <text> Use STL algorithms rather than hand-written loops.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.20">
              <text> Directly include necessary STL headers.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="15.0.21">
              <text> Do not use string format functions from the standard library.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
  <rulegroup name="CERT Cpp Rules">
    <rule help="" active="yes" id="Rule 01">
      <text>Declarations and Initialization</text>
      <enforcement>
        <rule help="" active="yes" id="DCL">
          <text>Declarations and Initialization</text>
          <enforcement>
            <rule help="" active="yes" id="DCL50-CPP">
              <text> Do not define a C-style variadic function</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2012" />
                <message mapped="yes" component="qacpp" id="2625" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL51-CPP">
              <text> Do not declare or define a reserved identifier</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5003" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL52-CPP">
              <text> Never qualify a reference type with const or volatile</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0014" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL53-CPP">
              <text> Do not write syntactically ambiguous declarations</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2502" />
                <message mapped="yes" component="qacpp" id="2510" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL55-CPP">
              <text> Avoid information leakage when passing a class object across a trust boundary</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="DCL56-CPP">
              <text> Avoid cycles during initialization of static objects</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1520" />
                <message mapped="yes" component="rcma" id="1521" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL58-CPP">
              <text> Do not modify the standard namespaces</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="DCL59-CPP">
              <text> Do not define an unnamed namespace in a header file</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2518" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL60-CPP">
              <text> Obey the one-definition rule</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1067" />
                <message mapped="yes" component="rcma" id="1509" />
                <message mapped="yes" component="rcma" id="1510" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL30-C">
              <text> Declare objects with appropriate storage durations</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2515" />
                <message mapped="yes" component="qacpp" id="2516" />
                <message mapped="yes" component="qacpp" id="2527" />
                <message mapped="yes" component="qacpp" id="2528" />
                <message mapped="yes" component="qacpp" id="4026" />
                <message mapped="yes" component="qacpp" id="4624" />
                <message mapped="yes" component="qacpp" id="4629" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="DCL39-C">
              <text> Avoid information leakage when passing a structure across a trust boundary</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="DCL40-C">
              <text> Do not create incompatible declarations of the same function or object</text>
              <enforcement>
                <message mapped="yes" component="rcma" id="1510" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 02">
      <text>Expressions</text>
      <enforcement>
        <rule help="" active="yes" id="EXP">
          <text>Expressions</text>
          <enforcement>
            <rule help="" active="yes" id="EXP50-CPP">
              <text> Do not depend on the order of evaluation for side effects</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3220" />
                <message mapped="yes" component="qacpp" id="3221" />
                <message mapped="yes" component="qacpp" id="3222" />
                <message mapped="yes" component="qacpp" id="3223" />
                <message mapped="yes" component="qacpp" id="3228" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP52-CPP">
              <text> Do not rely on side effects in unevaluated operands</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3240" />
                <message mapped="yes" component="qacpp" id="3241" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP53-CPP">
              <text> Do not read uninitialized memory</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2961" />
                <message mapped="yes" component="qacpp" id="2962" />
                <message mapped="yes" component="qacpp" id="2963" />
                <message mapped="yes" component="qacpp" id="2966" />
                <message mapped="yes" component="qacpp" id="2967" />
                <message mapped="yes" component="qacpp" id="2968" />
                <message mapped="yes" component="qacpp" id="2971" />
                <message mapped="yes" component="qacpp" id="2972" />
                <message mapped="yes" component="qacpp" id="2973" />
                <message mapped="yes" component="qacpp" id="2976" />
                <message mapped="yes" component="qacpp" id="2977" />
                <message mapped="yes" component="qacpp" id="2978" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP54-CPP">
              <text> Do not access an object outside of its lifetime</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2812" />
                <message mapped="yes" component="qacpp" id="2813" />
                <message mapped="yes" component="qacpp" id="2814" />
                <message mapped="yes" component="qacpp" id="2930" />
                <message mapped="yes" component="qacpp" id="2931" />
                <message mapped="yes" component="qacpp" id="2932" />
                <message mapped="yes" component="qacpp" id="2933" />
                <message mapped="yes" component="qacpp" id="2934" />
                <message mapped="yes" component="qacpp" id="4003" />
                <message mapped="yes" component="qacpp" id="4026" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP55-CPP">
              <text> Do not access a cv-qualified object through a cv-unqualified type</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3066" />
                <message mapped="yes" component="qacpp" id="4671" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP56-CPP">
              <text> Do not call a function with a mismatched language linkage</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0130" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP60-CPP">
              <text> Do not pass a nonstandard-layout type object across execution boundaries</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="EXP61-CPP">
              <text> A lambda object must not outlive any of its reference captured objects</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="EXP62-CPP">
              <text> Do not access the bits of an object representation that are not part of the object's value representation</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="EXP34-C">
              <text> Do not dereference null pointers</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2810" />
                <message mapped="yes" component="qacpp" id="2811" />
                <message mapped="yes" component="qacpp" id="2812" />
                <message mapped="yes" component="qacpp" id="2813" />
                <message mapped="yes" component="qacpp" id="2814" />
                <message mapped="yes" component="qacpp" id="2820" />
                <message mapped="yes" component="qacpp" id="2821" />
                <message mapped="yes" component="qacpp" id="2822" />
                <message mapped="yes" component="qacpp" id="2823" />
                <message mapped="yes" component="qacpp" id="2824" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP35-C">
              <text> Do not modify objects with temporary lifetime</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3805" />
                <message mapped="yes" component="qacpp" id="3806" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP36-C">
              <text> Do not cast pointers into more strictly aligned pointer types</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3033" />
                <message mapped="yes" component="qacpp" id="3038" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP37-C">
              <text> Call functions with the correct number and type of arguments</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0403" />
                <message mapped="yes" component="qacpp" id="0705" />
                <message mapped="yes" component="qacpp" id="0706" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP39-C">
              <text> Do not access a variable through a pointer of an incompatible type</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3017" />
                <message mapped="yes" component="qacpp" id="3030" />
                <message mapped="yes" component="qacpp" id="3033" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP42-C">
              <text> Do not compare padding data</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="EXP45-C">
              <text> Do not perform assignments in selection statements</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4071" />
                <message mapped="yes" component="qacpp" id="4074" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="EXP46-C">
              <text> Do not use a bitwise operator with a Boolean-like operand</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3709" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 03">
      <text>Integers</text>
      <enforcement>
        <rule help="" active="yes" id="INT">
          <text>Integers</text>
          <enforcement>
            <rule help="" active="yes" id="INT50-CPP">
              <text> Do not cast to an out-of-range enumeration value</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3013" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT30-C">
              <text> Ensure that unsigned integer operations do not wrap</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2910" />
                <message mapped="yes" component="qacpp" id="2911" />
                <message mapped="yes" component="qacpp" id="2912" />
                <message mapped="yes" component="qacpp" id="2913" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT31-C">
              <text> Ensure that integer conversions do not result in lost or misinterpreted data</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2850" />
                <message mapped="yes" component="qacpp" id="2851" />
                <message mapped="yes" component="qacpp" id="2852" />
                <message mapped="yes" component="qacpp" id="2853" />
                <message mapped="yes" component="qacpp" id="2855" />
                <message mapped="yes" component="qacpp" id="2856" />
                <message mapped="yes" component="qacpp" id="2857" />
                <message mapped="yes" component="qacpp" id="2858" />
                <message mapped="yes" component="qacpp" id="2890" />
                <message mapped="yes" component="qacpp" id="2891" />
                <message mapped="yes" component="qacpp" id="2892" />
                <message mapped="yes" component="qacpp" id="2893" />
                <message mapped="yes" component="qacpp" id="2895" />
                <message mapped="yes" component="qacpp" id="2896" />
                <message mapped="yes" component="qacpp" id="2897" />
                <message mapped="yes" component="qacpp" id="2898" />
                <message mapped="yes" component="qacpp" id="2900" />
                <message mapped="yes" component="qacpp" id="2901" />
                <message mapped="yes" component="qacpp" id="2902" />
                <message mapped="yes" component="qacpp" id="2903" />
                <message mapped="yes" component="qacpp" id="2905" />
                <message mapped="yes" component="qacpp" id="2906" />
                <message mapped="yes" component="qacpp" id="2907" />
                <message mapped="yes" component="qacpp" id="2908" />
                <message mapped="yes" component="qacpp" id="3000" />
                <message mapped="yes" component="qacpp" id="3010" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT32-C">
              <text> Ensure that operations on signed integers do not result in overflow</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2791" />
                <message mapped="yes" component="qacpp" id="2792" />
                <message mapped="yes" component="qacpp" id="2793" />
                <message mapped="yes" component="qacpp" id="2800" />
                <message mapped="yes" component="qacpp" id="2801" />
                <message mapped="yes" component="qacpp" id="2802" />
                <message mapped="yes" component="qacpp" id="2803" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT33-C">
              <text> Ensure that division and remainder operations do not result in divide-by-zero errors</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2831" />
                <message mapped="yes" component="qacpp" id="2832" />
                <message mapped="yes" component="qacpp" id="2833" />
                <message mapped="yes" component="qacpp" id="2834" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT34-C">
              <text> Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2791" />
                <message mapped="yes" component="qacpp" id="2792" />
                <message mapped="yes" component="qacpp" id="2793" />
                <message mapped="yes" component="qacpp" id="3003" />
                <message mapped="yes" component="qacpp" id="3321" />
                <message mapped="yes" component="qacpp" id="3322" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT35-C">
              <text> Use correct integer precisions</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2427" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="INT36-C">
              <text> Converting a pointer to integer or integer to pointer</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3040" />
                <message mapped="yes" component="qacpp" id="3041" />
                <message mapped="yes" component="qacpp" id="3042" />
                <message mapped="yes" component="qacpp" id="3043" />
                <message mapped="yes" component="qacpp" id="3044" />
                <message mapped="yes" component="qacpp" id="3045" />
                <message mapped="yes" component="qacpp" id="3046" />
                <message mapped="yes" component="qacpp" id="3047" />
                <message mapped="yes" component="qacpp" id="3048" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 04">
      <text>Containers</text>
      <enforcement>
        <rule help="" active="yes" id="CTR">
          <text>Containers</text>
          <enforcement>
            <rule help="" active="yes" id="CTR50-CPP">
              <text> Guarantee that container indices and iterators are within the valid range</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2891" />
                <message mapped="yes" component="qacpp" id="3139" />
                <message mapped="yes" component="qacpp" id="3140" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CTR51-CPP">
              <text> Use valid references, pointers, and iterators to reference elements of a container</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CTR52-CPP">
              <text> Guarantee that library functions do not overflow</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CTR53-CPP">
              <text> Use valid iterator ranges</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3802" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CTR54-CPP">
              <text> Do not subtract iterators that do not refer to the same container</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2761" />
                <message mapped="yes" component="qacpp" id="2762" />
                <message mapped="yes" component="qacpp" id="2763" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CTR55-CPP">
              <text> Do not use an additive operator on an iterator if the result would overflow</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CTR56-CPP">
              <text> Do not use pointer arithmetic on polymorphic objects</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3072" />
                <message mapped="yes" component="qacpp" id="3073" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CTR57-CPP">
              <text> Provide a valid ordering predicate</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CTR58-CPP">
              <text> Predicate function objects should not be mutable</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="ARR">
          <text>Arrays</text>
          <enforcement>
            <rule help="" active="yes" id="ARR30-C">
              <text> Do not form or use out-of-bounds pointers or array subscripts</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2820" />
                <message mapped="yes" component="qacpp" id="2821" />
                <message mapped="yes" component="qacpp" id="2822" />
                <message mapped="yes" component="qacpp" id="2823" />
                <message mapped="yes" component="qacpp" id="2824" />
                <message mapped="yes" component="qacpp" id="2840" />
                <message mapped="yes" component="qacpp" id="2841" />
                <message mapped="yes" component="qacpp" id="2842" />
                <message mapped="yes" component="qacpp" id="2843" />
                <message mapped="yes" component="qacpp" id="2844" />
                <message mapped="yes" component="qacpp" id="2930" />
                <message mapped="yes" component="qacpp" id="2931" />
                <message mapped="yes" component="qacpp" id="2932" />
                <message mapped="yes" component="qacpp" id="2935" />
                <message mapped="yes" component="qacpp" id="2936" />
                <message mapped="yes" component="qacpp" id="2937" />
                <message mapped="yes" component="qacpp" id="2938" />
                <message mapped="yes" component="qacpp" id="2939" />
                <message mapped="yes" component="qacpp" id="2950" />
                <message mapped="yes" component="qacpp" id="2951" />
                <message mapped="yes" component="qacpp" id="2952" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="ARR37-C">
              <text> Do not add or subtract an integer to a pointer to a non-array object</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3705" />
                <message mapped="yes" component="qacpp" id="3706" />
                <message mapped="yes" component="qacpp" id="3707" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="ARR38-C">
              <text> Guarantee that library functions do not form invalid pointers</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2840" />
                <message mapped="yes" component="qacpp" id="2841" />
                <message mapped="yes" component="qacpp" id="2842" />
                <message mapped="yes" component="qacpp" id="2843" />
                <message mapped="yes" component="qacpp" id="2844" />
                <message mapped="yes" component="qacpp" id="2935" />
                <message mapped="yes" component="qacpp" id="2936" />
                <message mapped="yes" component="qacpp" id="2937" />
                <message mapped="yes" component="qacpp" id="2938" />
                <message mapped="yes" component="qacpp" id="2939" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="ARR39-C">
              <text> Do not add or subtract a scaled integer to a pointer</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2840" />
                <message mapped="yes" component="qacpp" id="2841" />
                <message mapped="yes" component="qacpp" id="2842" />
                <message mapped="yes" component="qacpp" id="2843" />
                <message mapped="yes" component="qacpp" id="2844" />
                <message mapped="yes" component="qacpp" id="2930" />
                <message mapped="yes" component="qacpp" id="2931" />
                <message mapped="yes" component="qacpp" id="2932" />
                <message mapped="yes" component="qacpp" id="2933" />
                <message mapped="yes" component="qacpp" id="2934" />
                <message mapped="yes" component="qacpp" id="2935" />
                <message mapped="yes" component="qacpp" id="2936" />
                <message mapped="yes" component="qacpp" id="2937" />
                <message mapped="yes" component="qacpp" id="2938" />
                <message mapped="yes" component="qacpp" id="2939" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 05">
      <text>Characters and Strings</text>
      <enforcement>
        <rule help="" active="yes" id="STR">
          <text>Characters and Strings</text>
          <enforcement>
            <rule help="" active="yes" id="STR30-C">
              <text> Do not attempt to modify string literals</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3063" />
                <message mapped="yes" component="qacpp" id="3064" />
                <message mapped="yes" component="qacpp" id="3605" />
                <message mapped="yes" component="qacpp" id="3606" />
                <message mapped="yes" component="qacpp" id="3607" />
                <message mapped="yes" component="qacpp" id="3842" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="STR31-C">
              <text> Guarantee that storage for strings has sufficient space for character data and the null terminator</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0145" />
                <message mapped="yes" component="qacpp" id="2840" />
                <message mapped="yes" component="qacpp" id="2841" />
                <message mapped="yes" component="qacpp" id="2842" />
                <message mapped="yes" component="qacpp" id="2843" />
                <message mapped="yes" component="qacpp" id="2844" />
                <message mapped="yes" component="qacpp" id="2845" />
                <message mapped="yes" component="qacpp" id="2846" />
                <message mapped="yes" component="qacpp" id="2847" />
                <message mapped="yes" component="qacpp" id="2848" />
                <message mapped="yes" component="qacpp" id="2849" />
                <message mapped="yes" component="qacpp" id="2930" />
                <message mapped="yes" component="qacpp" id="2931" />
                <message mapped="yes" component="qacpp" id="2932" />
                <message mapped="yes" component="qacpp" id="2933" />
                <message mapped="yes" component="qacpp" id="2934" />
                <message mapped="yes" component="qacpp" id="2935" />
                <message mapped="yes" component="qacpp" id="2936" />
                <message mapped="yes" component="qacpp" id="2937" />
                <message mapped="yes" component="qacpp" id="2938" />
                <message mapped="yes" component="qacpp" id="2939" />
                <message mapped="yes" component="certcppcm" id="5006" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="STR32-C">
              <text> Do not pass a non-null-terminated character sequence to a library function that expects a string</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0145" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="STR34-C">
              <text> Cast characters to unsigned char before converting to larger integer sizes</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="STR37-C">
              <text> Arguments to character-handling functions must be representable as an unsigned char</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="STR38-C">
              <text> Do not confuse narrow and wide character strings and functions</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0403" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 06">
      <text>Memory Management</text>
      <enforcement>
        <rule help="" active="yes" id="MEM">
          <text>Memory Management</text>
          <enforcement>
            <rule help="" active="yes" id="MEM54-CPP">
              <text> Provide placement new with properly aligned pointers to sufficient storage capacity</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 07">
      <text>Input Output</text>
      <enforcement>
        <rule help="" active="yes" id="FIO">
          <text>Input Output</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 08">
      <text>Exceptions and Error Handling</text>
      <enforcement>
        <rule help="" active="yes" id="ERR">
          <text>Exceptions and Error Handling</text>
          <enforcement>
            <rule help="" active="yes" id="ERR50-CPP">
              <text> Do not abruptly terminate the program</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5014" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="ERR52-CPP">
              <text> Do not use setjmp() or longjmp()</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5015" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="ERR62-CPP">
              <text> Detect errors when converting a string to a number</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5016" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="ERR33-C">
              <text> Detect and handle standard library errors</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2820" />
                <message mapped="yes" component="qacpp" id="2821" />
                <message mapped="yes" component="qacpp" id="2822" />
                <message mapped="yes" component="qacpp" id="2823" />
                <message mapped="yes" component="qacpp" id="2824" />
                <message mapped="yes" component="qacpp" id="2930" />
                <message mapped="yes" component="qacpp" id="2931" />
                <message mapped="yes" component="qacpp" id="2932" />
                <message mapped="yes" component="qacpp" id="2933" />
                <message mapped="yes" component="qacpp" id="2934" />
                <message mapped="yes" component="qacpp" id="3802" />
                <message mapped="yes" component="qacpp" id="3803" />
                <message mapped="yes" component="qacpp" id="3804" />
                <message mapped="yes" component="qacpp" id="4126" />
                <message mapped="yes" component="qacpp" id="4127" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 09">
      <text>Object Oriented Programming</text>
      <enforcement>
        <rule help="" active="yes" id="OOP">
          <text>Object Oriented Programming</text>
          <enforcement>
            <rule help="" active="yes" id="OOP50-CPP">
              <text> Do not invoke virtual functions from constructors or destructors</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4260" />
                <message mapped="yes" component="qacpp" id="4261" />
                <message mapped="yes" component="qacpp" id="4273" />
                <message mapped="yes" component="qacpp" id="4274" />
                <message mapped="yes" component="qacpp" id="4275" />
                <message mapped="yes" component="qacpp" id="4276" />
                <message mapped="yes" component="qacpp" id="4277" />
                <message mapped="yes" component="qacpp" id="4278" />
                <message mapped="yes" component="qacpp" id="4279" />
                <message mapped="yes" component="qacpp" id="4280" />
                <message mapped="yes" component="qacpp" id="4281" />
                <message mapped="yes" component="qacpp" id="4282" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="OOP51-CPP">
              <text> Do not slice derived objects</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3072" />
                <message mapped="yes" component="qacpp" id="3073" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="OOP52-CPP">
              <text> Do not delete a polymorphic object without a virtual destructor</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2116" />
                <message mapped="yes" component="qacpp" id="3402" />
                <message mapped="yes" component="qacpp" id="3403" />
                <message mapped="yes" component="qacpp" id="3404" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="OOP53-CPP">
              <text> Write constructor member initializers in the canonical order</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4053" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="OOP54-CPP">
              <text> Gracefully handle self-copy assignment</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4072" />
                <message mapped="yes" component="qacpp" id="4073" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="OOP55-CPP">
              <text> Do not use pointer-to-member operators to access nonexistent members</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2810" />
                <message mapped="yes" component="qacpp" id="2811" />
                <message mapped="yes" component="qacpp" id="2812" />
                <message mapped="yes" component="qacpp" id="2813" />
                <message mapped="yes" component="qacpp" id="2814" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="OOP57-CPP">
              <text> Prefer special member functions and overloaded operators to C Standard Library functions</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="OOP58-CPP">
              <text> Copy operations must not mutate the source object</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 10">
      <text>Concurrency</text>
      <enforcement>
        <rule help="" active="yes" id="CON">
          <text>Concurrency</text>
          <enforcement>
            <rule help="" active="yes" id="CON50-CPP">
              <text> Do not destroy a mutex while it is locked</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CON52-CPP">
              <text> Prevent data races when accessing bit-fields from multiple threads</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CON53-CPP">
              <text> Avoid deadlock by locking in a predefined order</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CON54-CPP">
              <text> Wrap functions that can spuriously wake up in a loop</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5019" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CON33-C">
              <text> Avoid race conditions when using library functions</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5021" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CON37-C">
              <text> Do not call signal() in a multithreaded program</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5022" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CON40-C">
              <text> Do not refer to an atomic variable twice in an expression</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="CON41-C">
              <text> Wrap functions that can fail spuriously in a loop</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5023" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="CON43-C">
              <text> Do not allow data races in multithreaded code</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="Rule 49">
      <text>Miscellaneous</text>
      <enforcement>
        <rule help="" active="yes" id="MSC">
          <text>Miscellaneous</text>
          <enforcement>
            <rule help="" active="yes" id="MSC50-CPP">
              <text> Do not use std::rand() for generating pseudorandom numbers</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5028" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="MSC51-CPP">
              <text> Ensure your random number generator is properly seeded</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="MSC52-CPP">
              <text> Value-returning functions must return a value from all exit paths</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2888" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="MSC37-C">
              <text> Ensure that control never reaches the end of a non-void function</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2888" />
                <message mapped="yes" component="qacpp" id="4022" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="MSC40-C">
              <text> Do not violate constraints</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4122" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="FLP">
          <text>Floating Point</text>
          <enforcement>
            <rule help="" active="yes" id="FLP30-C">
              <text> Do not use floating-point variables as loop counters</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4234" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="FLP32-C">
              <text> Prevent or detect domain and range errors in math functions</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="FLP34-C">
              <text> Ensure that floating-point conversions are within range of the new type</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3011" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="FLP36-C">
              <text> Preserve precision when converting integral values to floating-point type</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3011" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="FLP37-C">
              <text> Do not use object representations to compare floating-point values</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="ENV">
          <text>Environment</text>
          <enforcement>
            <rule help="" active="yes" id="ENV33-C">
              <text> Do not call system()</text>
              <enforcement>
                <message mapped="yes" component="certcppcm" id="5031" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="SIG">
          <text>Signals</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="PRE">
          <text>Preprocessor</text>
          <enforcement>
            <rule help="" active="yes" id="PRE30-C">
              <text> Do not create a universal character name through concatenation</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0064" />
                <message mapped="yes" component="qacpp" id="0080" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
  <rulegroup name="AR Cpp14 Rules">
    <rule help="" active="yes" id="ARCPP14 Rule 0">
      <text>Language independent issues</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A0-1">
          <text>Unnecessary constructs</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A0-1-4">
              <text>There shall be no unused named parameters in non-virtual functions.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4327" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A0-1-5">
              <text>There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A0-2">
          <text>Storage</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A0-3">
          <text>Runtime failures</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A0-4">
          <text>Arithmetic</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 1">
      <text>General</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A1-1">
          <text>Scope</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A1-2">
          <text>Normative references</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A1-3">
          <text>Implementation compliance</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 2">
      <text>Lexical conventions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A2-3">
          <text>Character sets</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A2-5">
          <text>Alternative tokens</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A2-7">
          <text>Comments</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A2-8">
          <text>Header names</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A2-10">
          <text>Identifiers</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A2-10-4">
              <text>The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A2-11">
          <text>Keywords</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A2-13">
          <text>Literals</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A2-13-1">
              <text>Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0077" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 3">
      <text>Basic concepts</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A3-1">
          <text>Declarations and definitions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A3-2">
          <text>One Definition Rule</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A3-3">
          <text>Scope</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A3-4">
          <text>Name lookup</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A3-8">
          <text>Object lifetime</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A3-9">
          <text>Types</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 4">
      <text>Standard conversions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A4-5">
          <text>Integral promotions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A4-7">
          <text>Integral conversions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A4-10">
          <text>Pointer conversions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A4-10-1">
              <text>Only nullptr literal shall be used as the null-pointer-constant.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 5">
      <text>Expressions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A5-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-1">
          <text>Primary expression</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A5-1-2">
              <text>Variables shall not be implicitly captured in a lambda expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3880" />
                <message mapped="yes" component="qacpp" id="3881" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A5-1-3">
              <text>Parameter list (possibly empty) shall be included in every lambda expression.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1107" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A5-1-4">
              <text>A lambda expression object shall not outlive any of its reference-captured objects.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule A5-1-6">
              <text>Return type of a non-void return type lambda expression should be explicitly specified.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule A5-1-7">
              <text>A lambda shall not be an operand to decltype or typeid.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule A5-1-8">
              <text>Lambda expressions should not be defined inside another lambda expression.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule A5-1-9">
              <text>Identical unnamed lambda expressions shall be replaced with a named function or a named lambda expression.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A5-2">
          <text>Postfix expressions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A5-2-2">
              <text>Traditional C-style casts shall not be used.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="3080" />
                <message mapped="yes" component="qacpp" id="3082" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A5-3">
          <text>Unary expressions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-5">
          <text>Pointer - to - member</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-6">
          <text>Multiplicative operators</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-8">
          <text>Shift operators</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-10">
          <text>Equality operators</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-14">
          <text>Logical AND operator</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-16">
          <text>Conditional operator</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-18">
          <text>Assignment and compound assignment operation</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-19">
          <text>Comma operator</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A5-20">
          <text>Constant expression</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 6">
      <text>Statements</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A6-2">
          <text>Expression statement</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A6-3">
          <text>Compound statement or block</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A6-4">
          <text>Selection statements</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A6-5">
          <text>Iteration statements</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A6-6">
          <text>Jump statements</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 7">
      <text>Declaration</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A7-1">
          <text>Specifiers</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A7-2">
          <text>Enumeration declaration</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A7-3">
          <text>Namespaces</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A7-4">
          <text>The asm declaration</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A7-5">
          <text>Linkage specification</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A7-6">
          <text>Attributes</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 8">
      <text>Declarators</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A8-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A8-2">
          <text>Ambiguity resolution</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A8-3">
          <text>Meaning of declarators</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A8-4">
          <text>Function definitions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A8-5">
          <text>Initializers</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A8-5-3">
              <text>A variable of type auto shall not be initialized using {} or ={} braced-initialization.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2325" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A8-5-4">
              <text>If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 9">
      <text>Classes</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A9-3">
          <text>Member function</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A9-5">
          <text>Unions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A9-6">
          <text>Bit-fields</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A9-6-1">
              <text>Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2304" />
                <message mapped="yes" component="qacpp" id="2305" />
                <message mapped="yes" component="qacpp" id="2306" />
                <message mapped="yes" component="qacpp" id="2308" />
                <message mapped="yes" component="qacpp" id="2309" />
                <message mapped="yes" component="qacpp" id="2321" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 10">
      <text>Derived Classes</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A10-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A10-1">
          <text>Multiple base Classes</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A10-2">
          <text>Member name lookup</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A10-3">
          <text>Virtual functions</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A10-3-1">
              <text>Virtual function declaration shall contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2135" />
                <message mapped="yes" component="qacpp" id="2136" />
                <message mapped="yes" component="qacpp" id="2653" />
                <message mapped="yes" component="qacpp" id="2654" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A10-3-2">
              <text>Each overriding virtual function shall be declared with the override or final specifier.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2135" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A10-3-3">
              <text>Virtual functions shall not be introduced in a final class.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2655" />
                <message mapped="yes" component="qacpp" id="2656" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A10-3-5">
              <text>A user-defined assignment operator shall not be virtual.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2657" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A10-4">
          <text>Abstract Classes</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 11">
      <text>Member access control</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A11-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A11-3">
          <text>Friends</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 12">
      <text>Special member functions</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A12-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A12-1">
          <text>Constructors</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A12-1-2">
              <text>Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2326" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A12-1-3">
              <text>If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule A12-1-5">
              <text>Common class initialization for non-constant members shall be done by a delegating constructor.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="Rule A12-1-6">
              <text>Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A12-4">
          <text>Destructors</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A12-6">
          <text>Initialization</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A12-7">
          <text>Construction and destructions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A12-8">
          <text>Copying and moving class objects</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A12-8-1">
              <text>Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4285" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A12-8-5">
              <text>A copy assignment and a move assignment operators shall handle self-assignment.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4072" />
                <message mapped="yes" component="qacpp" id="4073" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A12-8-6">
              <text>Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined '=delete' in base class.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2659" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="Rule A12-8-7">
              <text>Assignment operators should be declared with the ref-qualifier &amp;.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2051" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 13">
      <text>Overloading</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A13-1">
          <text>Overloadable declarations</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A13-2">
          <text>Declaration matching</text>
          <enforcement>
            <rule help="" active="yes" id="Rule A13-2-1">
              <text>An assignment operator shall return a reference to 'this'.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2074" />
                <message mapped="yes" component="qacpp" id="2093" />
                <message mapped="yes" component="qacpp" id="4620" />
                <message mapped="yes" component="qacpp" id="4621" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="Rule A13-3">
          <text>Overload resolution</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A13-5">
          <text>Overloaded operators</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A13-6">
          <text>Build -in operators</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 14">
      <text>Templates</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A14-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A14-1">
          <text>Template parameters</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A14-5">
          <text>Template declarations</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A14-6">
          <text>Name resolution</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A14-7">
          <text>Template instantiation and specialization</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A14-8">
          <text>Function template specializations</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 15">
      <text>Exception handling</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A15-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A15-1">
          <text>Throwing an exception</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A15-2">
          <text>Constructors and destructors</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A15-3">
          <text>Handling an exception</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A15-4">
          <text>Exception specifications</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A15-5">
          <text>Special functions</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 16">
      <text>Preprocessing directives</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A16-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A16-1">
          <text>Conditional inclusion</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A16-2">
          <text>Source file inclusion</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A16-3">
          <text>Macro replacement</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A16-6">
          <text>Error directive</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A16-7">
          <text>Pragma directive</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 17">
      <text>Library introduction - partial</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A17-1">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A17-2">
          <text>The C standard library</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A17-3">
          <text>Definitions</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A17-6">
          <text>Library-wide requirements</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 18">
      <text>Language support library - partial</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A18-0">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A18-1">
          <text>Types</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A18-2">
          <text>Implementation properties</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A18-5">
          <text>Dynamic memory management</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A18-9">
          <text>Other runtime support</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 19">
      <text>Diagnostics library - partial</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A19-4">
          <text>Error numbers</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 20">
      <text>General utilities library - partial</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A20-8">
          <text>Smart pointers</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 21">
      <text>Strings library</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A21-8">
          <text>Null-terminated sequence utilities</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 23">
      <text>Containers library - partial</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A23-1">
          <text>General</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 25">
      <text>Algorithms library</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A25-1">
          <text>General</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A25-4">
          <text>Sorting and related operations</text>
          <enforcement />
        </rule>
        <rule help="" active="yes" id="Rule A25-5">
          <text>Random number generation</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
    <rule help="" active="yes" id="ARCPP14 Rule 27">
      <text>Input/output library - partial</text>
      <enforcement>
        <rule help="" active="yes" id="Rule A27-1">
          <text>General</text>
          <enforcement />
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
  <rulegroup name="C++11 Usage Rules">
    <rule help="" active="yes" id="Rules">
      <text>Rules</text>
      <enforcement>
        <rule help="" active="yes" id="R">
          <text>Rules</text>
          <enforcement>
            <rule help="" active="yes" id="R1">
              <text> All code shall conform to the following subset of ISO/IEC 14882:2011 (Only use these explicitly allowed C++11 features).</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="0010" />
                <message mapped="yes" component="qacpp" id="0011" />
                <message mapped="yes" component="qacpp" id="0012" />
                <message mapped="yes" component="qacpp" id="0013" />
                <message mapped="yes" component="qacpp" id="0014" />
                <message mapped="yes" component="qacpp" id="0015" />
                <message mapped="yes" component="qacpp" id="0016" />
                <message mapped="yes" component="qacpp" id="0017" />
                <message mapped="yes" component="qacpp" id="0018" />
                <message mapped="yes" component="qacpp" id="0019" />
                <message mapped="yes" component="qacpp" id="0020" />
                <message mapped="yes" component="qacpp" id="0021" />
                <message mapped="yes" component="qacpp" id="0022" />
                <message mapped="yes" component="qacpp" id="0023" />
                <message mapped="yes" component="qacpp" id="0024" />
                <message mapped="yes" component="qacpp" id="0025" />
                <message mapped="yes" component="qacpp" id="0026" />
                <message mapped="yes" component="qacpp" id="0027" />
                <message mapped="yes" component="qacpp" id="0028" />
                <message mapped="yes" component="qacpp" id="0029" />
                <message mapped="yes" component="qacpp" id="0030" />
                <message mapped="yes" component="qacpp" id="0031" />
                <message mapped="yes" component="qacpp" id="0032" />
                <message mapped="yes" component="qacpp" id="0034" />
                <message mapped="yes" component="qacpp" id="0035" />
                <message mapped="yes" component="qacpp" id="0036" />
                <message mapped="yes" component="qacpp" id="0037" />
                <message mapped="yes" component="qacpp" id="0039" />
                <message mapped="yes" component="qacpp" id="0040" />
                <message mapped="yes" component="qacpp" id="0043" />
                <message mapped="yes" component="qacpp" id="0045" />
                <message mapped="yes" component="qacpp" id="0046" />
                <message mapped="yes" component="qacpp" id="0047" />
                <message mapped="yes" component="qacpp" id="0048" />
                <message mapped="yes" component="qacpp" id="0050" />
                <message mapped="yes" component="qacpp" id="0051" />
                <message mapped="yes" component="qacpp" id="0052" />
                <message mapped="yes" component="qacpp" id="0053" />
                <message mapped="yes" component="qacpp" id="0054" />
                <message mapped="yes" component="qacpp" id="0056" />
                <message mapped="yes" component="qacpp" id="0057" />
                <message mapped="yes" component="qacpp" id="0058" />
                <message mapped="yes" component="qacpp" id="0059" />
                <message mapped="yes" component="qacpp" id="0060" />
                <message mapped="yes" component="qacpp" id="0061" />
                <message mapped="yes" component="qacpp" id="0063" />
                <message mapped="yes" component="qacpp" id="0064" />
                <message mapped="yes" component="qacpp" id="0066" />
                <message mapped="yes" component="qacpp" id="0067" />
                <message mapped="yes" component="qacpp" id="0068" />
                <message mapped="yes" component="qacpp" id="0069" />
                <message mapped="yes" component="qacpp" id="0070" />
                <message mapped="yes" component="qacpp" id="0071" />
                <message mapped="yes" component="qacpp" id="0072" />
                <message mapped="yes" component="qacpp" id="0073" />
                <message mapped="yes" component="qacpp" id="0074" />
                <message mapped="yes" component="qacpp" id="0075" />
                <message mapped="yes" component="qacpp" id="0076" />
                <message mapped="yes" component="qacpp" id="0077" />
                <message mapped="yes" component="qacpp" id="0078" />
                <message mapped="yes" component="qacpp" id="0083" />
                <message mapped="yes" component="qacpp" id="0084" />
                <message mapped="yes" component="qacpp" id="0085" />
                <message mapped="yes" component="qacpp" id="0086" />
                <message mapped="yes" component="qacpp" id="0087" />
                <message mapped="yes" component="qacpp" id="0088" />
                <message mapped="yes" component="qacpp" id="0089" />
                <message mapped="yes" component="qacpp" id="0090" />
                <message mapped="yes" component="qacpp" id="0091" />
                <message mapped="yes" component="qacpp" id="0092" />
                <message mapped="yes" component="qacpp" id="0094" />
                <message mapped="yes" component="qacpp" id="0095" />
                <message mapped="yes" component="qacpp" id="0097" />
                <message mapped="yes" component="qacpp" id="0098" />
                <message mapped="yes" component="qacpp" id="0099" />
                <message mapped="yes" component="qacpp" id="0100" />
                <message mapped="yes" component="qacpp" id="0101" />
                <message mapped="yes" component="qacpp" id="0103" />
                <message mapped="yes" component="qacpp" id="0104" />
                <message mapped="yes" component="qacpp" id="0105" />
                <message mapped="yes" component="qacpp" id="0107" />
                <message mapped="yes" component="qacpp" id="0108" />
                <message mapped="yes" component="qacpp" id="0114" />
                <message mapped="yes" component="qacpp" id="0115" />
                <message mapped="yes" component="qacpp" id="0117" />
                <message mapped="yes" component="qacpp" id="0118" />
                <message mapped="yes" component="qacpp" id="0122" />
                <message mapped="yes" component="qacpp" id="0124" />
                <message mapped="yes" component="qacpp" id="0125" />
                <message mapped="yes" component="qacpp" id="0126" />
                <message mapped="yes" component="qacpp" id="0127" />
                <message mapped="yes" component="qacpp" id="0128" />
                <message mapped="yes" component="qacpp" id="0129" />
                <message mapped="yes" component="qacpp" id="0131" />
                <message mapped="yes" component="qacpp" id="0133" />
                <message mapped="yes" component="qacpp" id="0134" />
                <message mapped="yes" component="qacpp" id="0135" />
                <message mapped="yes" component="qacpp" id="0136" />
                <message mapped="yes" component="qacpp" id="0137" />
                <message mapped="yes" component="qacpp" id="0139" />
                <message mapped="yes" component="qacpp" id="0140" />
                <message mapped="yes" component="qacpp" id="0141" />
                <message mapped="yes" component="qacpp" id="0142" />
                <message mapped="yes" component="qacpp" id="0143" />
                <message mapped="yes" component="qacpp" id="0144" />
                <message mapped="yes" component="qacpp" id="0145" />
                <message mapped="yes" component="qacpp" id="0146" />
                <message mapped="yes" component="qacpp" id="0147" />
                <message mapped="yes" component="qacpp" id="0148" />
                <message mapped="yes" component="qacpp" id="0149" />
                <message mapped="yes" component="qacpp" id="0150" />
                <message mapped="yes" component="qacpp" id="0152" />
                <message mapped="yes" component="qacpp" id="0153" />
                <message mapped="yes" component="qacpp" id="0154" />
                <message mapped="yes" component="qacpp" id="0155" />
                <message mapped="yes" component="qacpp" id="0156" />
                <message mapped="yes" component="qacpp" id="0157" />
                <message mapped="yes" component="qacpp" id="0158" />
                <message mapped="yes" component="qacpp" id="0159" />
                <message mapped="yes" component="qacpp" id="0160" />
                <message mapped="yes" component="qacpp" id="0161" />
                <message mapped="yes" component="qacpp" id="0162" />
                <message mapped="yes" component="qacpp" id="0163" />
                <message mapped="yes" component="qacpp" id="0164" />
                <message mapped="yes" component="qacpp" id="0165" />
                <message mapped="yes" component="qacpp" id="0166" />
                <message mapped="yes" component="qacpp" id="0167" />
                <message mapped="yes" component="qacpp" id="0168" />
                <message mapped="yes" component="qacpp" id="0169" />
                <message mapped="yes" component="qacpp" id="0170" />
                <message mapped="yes" component="qacpp" id="0172" />
                <message mapped="yes" component="qacpp" id="0173" />
                <message mapped="yes" component="qacpp" id="0174" />
                <message mapped="yes" component="qacpp" id="0175" />
                <message mapped="yes" component="qacpp" id="0176" />
                <message mapped="yes" component="qacpp" id="0177" />
                <message mapped="yes" component="qacpp" id="0178" />
                <message mapped="yes" component="qacpp" id="0179" />
                <message mapped="yes" component="qacpp" id="0180" />
                <message mapped="yes" component="qacpp" id="0181" />
                <message mapped="yes" component="qacpp" id="0182" />
                <message mapped="yes" component="qacpp" id="0183" />
                <message mapped="yes" component="qacpp" id="0184" />
                <message mapped="yes" component="qacpp" id="0185" />
                <message mapped="yes" component="qacpp" id="0186" />
                <message mapped="yes" component="qacpp" id="0187" />
                <message mapped="yes" component="qacpp" id="0189" />
                <message mapped="yes" component="qacpp" id="0190" />
                <message mapped="yes" component="qacpp" id="0191" />
                <message mapped="yes" component="qacpp" id="0192" />
                <message mapped="yes" component="qacpp" id="0193" />
                <message mapped="yes" component="qacpp" id="0194" />
                <message mapped="yes" component="qacpp" id="0195" />
                <message mapped="yes" component="qacpp" id="0196" />
                <message mapped="yes" component="qacpp" id="0197" />
                <message mapped="yes" component="qacpp" id="0198" />
                <message mapped="yes" component="qacpp" id="0199" />
                <message mapped="yes" component="qacpp" id="0200" />
                <message mapped="yes" component="qacpp" id="0201" />
                <message mapped="yes" component="qacpp" id="0202" />
                <message mapped="yes" component="qacpp" id="0203" />
                <message mapped="yes" component="qacpp" id="0204" />
                <message mapped="yes" component="qacpp" id="0205" />
                <message mapped="yes" component="qacpp" id="0206" />
                <message mapped="yes" component="qacpp" id="0207" />
                <message mapped="yes" component="qacpp" id="0208" />
                <message mapped="yes" component="qacpp" id="0209" />
                <message mapped="yes" component="qacpp" id="0210" />
                <message mapped="yes" component="qacpp" id="0211" />
                <message mapped="yes" component="qacpp" id="0220" />
                <message mapped="yes" component="qacpp" id="0221" />
                <message mapped="yes" component="qacpp" id="0222" />
                <message mapped="yes" component="qacpp" id="0223" />
                <message mapped="yes" component="qacpp" id="0224" />
                <message mapped="yes" component="qacpp" id="0225" />
                <message mapped="yes" component="qacpp" id="0226" />
                <message mapped="yes" component="qacpp" id="0227" />
                <message mapped="yes" component="qacpp" id="0228" />
                <message mapped="yes" component="qacpp" id="0229" />
                <message mapped="yes" component="qacpp" id="0231" />
                <message mapped="yes" component="qacpp" id="0232" />
                <message mapped="yes" component="qacpp" id="0233" />
                <message mapped="yes" component="qacpp" id="0236" />
                <message mapped="yes" component="qacpp" id="0237" />
                <message mapped="yes" component="qacpp" id="0238" />
                <message mapped="yes" component="qacpp" id="0239" />
                <message mapped="yes" component="qacpp" id="0240" />
                <message mapped="yes" component="qacpp" id="0241" />
                <message mapped="yes" component="qacpp" id="0242" />
                <message mapped="yes" component="qacpp" id="0243" />
                <message mapped="yes" component="qacpp" id="0245" />
                <message mapped="yes" component="qacpp" id="0246" />
                <message mapped="yes" component="qacpp" id="0247" />
                <message mapped="yes" component="qacpp" id="0248" />
                <message mapped="yes" component="qacpp" id="0249" />
                <message mapped="yes" component="qacpp" id="0250" />
                <message mapped="yes" component="qacpp" id="0251" />
                <message mapped="yes" component="qacpp" id="0252" />
                <message mapped="yes" component="qacpp" id="0253" />
                <message mapped="yes" component="qacpp" id="0254" />
                <message mapped="yes" component="qacpp" id="0255" />
                <message mapped="yes" component="qacpp" id="0256" />
                <message mapped="yes" component="qacpp" id="0257" />
                <message mapped="yes" component="qacpp" id="0258" />
                <message mapped="yes" component="qacpp" id="0259" />
                <message mapped="yes" component="qacpp" id="0260" />
                <message mapped="yes" component="qacpp" id="0262" />
                <message mapped="yes" component="qacpp" id="0263" />
                <message mapped="yes" component="qacpp" id="0264" />
                <message mapped="yes" component="qacpp" id="0265" />
                <message mapped="yes" component="qacpp" id="0266" />
                <message mapped="yes" component="qacpp" id="0267" />
                <message mapped="yes" component="qacpp" id="0268" />
                <message mapped="yes" component="qacpp" id="0269" />
                <message mapped="yes" component="qacpp" id="0271" />
                <message mapped="yes" component="qacpp" id="0272" />
                <message mapped="yes" component="qacpp" id="0273" />
                <message mapped="yes" component="qacpp" id="0274" />
                <message mapped="yes" component="qacpp" id="0275" />
                <message mapped="yes" component="qacpp" id="0276" />
                <message mapped="yes" component="qacpp" id="0277" />
                <message mapped="yes" component="qacpp" id="0280" />
                <message mapped="yes" component="qacpp" id="0281" />
                <message mapped="yes" component="qacpp" id="0282" />
                <message mapped="yes" component="qacpp" id="0283" />
                <message mapped="yes" component="qacpp" id="0284" />
                <message mapped="yes" component="qacpp" id="0285" />
                <message mapped="yes" component="qacpp" id="0286" />
                <message mapped="yes" component="qacpp" id="0287" />
                <message mapped="yes" component="qacpp" id="0288" />
                <message mapped="yes" component="qacpp" id="0289" />
                <message mapped="yes" component="qacpp" id="0290" />
                <message mapped="yes" component="qacpp" id="0291" />
                <message mapped="yes" component="qacpp" id="0292" />
                <message mapped="yes" component="qacpp" id="0293" />
                <message mapped="yes" component="qacpp" id="0294" />
                <message mapped="yes" component="qacpp" id="0295" />
                <message mapped="yes" component="qacpp" id="0296" />
                <message mapped="yes" component="qacpp" id="0297" />
                <message mapped="yes" component="qacpp" id="0298" />
                <message mapped="yes" component="qacpp" id="0299" />
                <message mapped="yes" component="qacpp" id="0301" />
                <message mapped="yes" component="qacpp" id="0302" />
                <message mapped="yes" component="qacpp" id="0303" />
                <message mapped="yes" component="qacpp" id="0304" />
                <message mapped="yes" component="qacpp" id="0305" />
                <message mapped="yes" component="qacpp" id="0306" />
                <message mapped="yes" component="qacpp" id="0307" />
                <message mapped="yes" component="qacpp" id="0308" />
                <message mapped="yes" component="qacpp" id="0309" />
                <message mapped="yes" component="qacpp" id="0310" />
                <message mapped="yes" component="qacpp" id="0311" />
                <message mapped="yes" component="qacpp" id="0400" />
                <message mapped="yes" component="qacpp" id="0401" />
                <message mapped="yes" component="qacpp" id="0403" />
                <message mapped="yes" component="qacpp" id="0404" />
                <message mapped="yes" component="qacpp" id="0405" />
                <message mapped="yes" component="qacpp" id="0406" />
                <message mapped="yes" component="qacpp" id="0415" />
                <message mapped="yes" component="qacpp" id="0424" />
                <message mapped="yes" component="qacpp" id="0429" />
                <message mapped="yes" component="qacpp" id="0435" />
                <message mapped="yes" component="qacpp" id="0439" />
                <message mapped="yes" component="qacpp" id="0440" />
                <message mapped="yes" component="qacpp" id="0441" />
                <message mapped="yes" component="qacpp" id="0445" />
                <message mapped="yes" component="qacpp" id="0446" />
                <message mapped="yes" component="qacpp" id="0447" />
                <message mapped="yes" component="qacpp" id="0448" />
                <message mapped="yes" component="qacpp" id="0450" />
                <message mapped="yes" component="qacpp" id="0451" />
                <message mapped="yes" component="qacpp" id="0453" />
                <message mapped="yes" component="qacpp" id="0454" />
                <message mapped="yes" component="qacpp" id="0455" />
                <message mapped="yes" component="qacpp" id="0456" />
                <message mapped="yes" component="qacpp" id="0457" />
                <message mapped="yes" component="qacpp" id="0458" />
                <message mapped="yes" component="qacpp" id="0459" />
                <message mapped="yes" component="qacpp" id="0461" />
                <message mapped="yes" component="qacpp" id="0462" />
                <message mapped="yes" component="qacpp" id="0464" />
                <message mapped="yes" component="qacpp" id="0465" />
                <message mapped="yes" component="qacpp" id="0466" />
                <message mapped="yes" component="qacpp" id="0467" />
                <message mapped="yes" component="qacpp" id="0468" />
                <message mapped="yes" component="qacpp" id="0469" />
                <message mapped="yes" component="qacpp" id="0471" />
                <message mapped="yes" component="qacpp" id="0473" />
                <message mapped="yes" component="qacpp" id="0475" />
                <message mapped="yes" component="qacpp" id="0479" />
                <message mapped="yes" component="qacpp" id="0480" />
                <message mapped="yes" component="qacpp" id="0481" />
                <message mapped="yes" component="qacpp" id="0482" />
                <message mapped="yes" component="qacpp" id="0483" />
                <message mapped="yes" component="qacpp" id="0484" />
                <message mapped="yes" component="qacpp" id="0485" />
                <message mapped="yes" component="qacpp" id="0486" />
                <message mapped="yes" component="qacpp" id="0487" />
                <message mapped="yes" component="qacpp" id="0488" />
                <message mapped="yes" component="qacpp" id="0489" />
                <message mapped="yes" component="qacpp" id="0490" />
                <message mapped="yes" component="qacpp" id="0491" />
                <message mapped="yes" component="qacpp" id="0600" />
                <message mapped="yes" component="qacpp" id="0601" />
                <message mapped="yes" component="qacpp" id="0602" />
                <message mapped="yes" component="qacpp" id="0603" />
                <message mapped="yes" component="qacpp" id="0604" />
                <message mapped="yes" component="qacpp" id="0606" />
                <message mapped="yes" component="qacpp" id="0607" />
                <message mapped="yes" component="qacpp" id="0608" />
                <message mapped="yes" component="qacpp" id="0609" />
                <message mapped="yes" component="qacpp" id="0610" />
                <message mapped="yes" component="qacpp" id="0611" />
                <message mapped="yes" component="qacpp" id="0612" />
                <message mapped="yes" component="qacpp" id="0613" />
                <message mapped="yes" component="qacpp" id="0616" />
                <message mapped="yes" component="qacpp" id="0617" />
                <message mapped="yes" component="qacpp" id="0618" />
                <message mapped="yes" component="qacpp" id="0619" />
                <message mapped="yes" component="qacpp" id="0620" />
                <message mapped="yes" component="qacpp" id="0621" />
                <message mapped="yes" component="qacpp" id="0622" />
                <message mapped="yes" component="qacpp" id="0623" />
                <message mapped="yes" component="qacpp" id="0624" />
                <message mapped="yes" component="qacpp" id="0625" />
                <message mapped="yes" component="qacpp" id="0627" />
                <message mapped="yes" component="qacpp" id="0628" />
                <message mapped="yes" component="qacpp" id="0629" />
                <message mapped="yes" component="qacpp" id="0630" />
                <message mapped="yes" component="qacpp" id="0631" />
                <message mapped="yes" component="qacpp" id="0800" />
                <message mapped="yes" component="qacpp" id="0801" />
                <message mapped="yes" component="qacpp" id="0802" />
                <message mapped="yes" component="qacpp" id="0803" />
                <message mapped="yes" component="qacpp" id="0804" />
                <message mapped="yes" component="qacpp" id="0805" />
                <message mapped="yes" component="qacpp" id="0996" />
                <message mapped="yes" component="qacpp" id="1124" />
                <message mapped="yes" component="qacpp" id="1131" />
                <message mapped="yes" component="qacpp" id="1133" />
                <message mapped="yes" component="qacpp" id="1134" />
                <message mapped="yes" component="qacpp" id="1140" />
                <message mapped="yes" component="qacpp" id="1141" />
                <message mapped="yes" component="qacpp" id="1144" />
                <message mapped="yes" component="qacpp" id="1145" />
                <message mapped="yes" component="qacpp" id="1146" />
                <message mapped="yes" component="qacpp" id="1148" />
                <message mapped="yes" component="qacpp" id="1149" />
                <message mapped="yes" component="qacpp" id="1150" />
                <message mapped="yes" component="qacpp" id="1151" />
                <message mapped="yes" component="qacpp" id="1152" />
                <message mapped="yes" component="qacpp" id="1153" />
                <message mapped="yes" component="rcma" id="1509" />
                <message mapped="yes" component="rcma" id="1510" />
                <message mapped="yes" component="qacpp" id="1950" />
                <message mapped="yes" component="qacpp" id="1951" />
                <message mapped="yes" component="qacpp" id="1962" />
                <message mapped="yes" component="qacpp" id="1963" />
                <message mapped="yes" component="qacpp" id="1964" />
                <message mapped="yes" component="qacpp" id="1965" />
                <message mapped="yes" component="qacpp" id="1966" />
                <message mapped="yes" component="qacpp" id="1967" />
                <message mapped="yes" component="qacpp" id="1968" />
                <message mapped="yes" component="qacpp" id="1969" />
                <message mapped="yes" component="qacpp" id="1970" />
                <message mapped="yes" component="qacpp" id="1971" />
                <message mapped="yes" component="qacpp" id="1972" />
                <message mapped="yes" component="qacpp" id="1973" />
                <message mapped="yes" component="qacpp" id="1974" />
                <message mapped="yes" component="qacpp" id="1975" />
                <message mapped="yes" component="qacpp" id="1976" />
                <message mapped="yes" component="qacpp" id="1977" />
                <message mapped="yes" component="qacpp" id="1978" />
                <message mapped="yes" component="qacpp" id="1979" />
                <message mapped="yes" component="qacpp" id="1980" />
                <message mapped="yes" component="qacpp" id="1982" />
                <message mapped="yes" component="qacpp" id="1984" />
                <message mapped="yes" component="qacpp" id="1985" />
                <message mapped="yes" component="qacpp" id="1986" />
                <message mapped="yes" component="qacpp" id="1987" />
                <message mapped="yes" component="qacpp" id="1989" />
                <message mapped="yes" component="qacpp" id="1990" />
                <message mapped="yes" component="qacpp" id="1991" />
                <message mapped="yes" component="qacpp" id="2316" />
                <message mapped="yes" component="qacpp" id="2317" />
                <message mapped="yes" component="qacpp" id="3036" />
                <message mapped="yes" component="qacpp" id="3063" />
                <message mapped="yes" component="qacpp" id="3064" />
                <message mapped="yes" component="qacpp" id="3095" />
                <message mapped="yes" component="qacpp" id="3104" />
                <message mapped="yes" component="qacpp" id="3291" />
                <message mapped="yes" component="qacpp" id="4100" />
                <message mapped="yes" component="qacpp" id="4300" />
                <message mapped="yes" component="qacpp" id="4306" />
                <message mapped="yes" component="qacpp" id="4647" />
                <message mapped="yes" component="qacpp" id="4651" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="R2">
              <text>Do not use ’auto’ for integer types, and only if the type can be deduced from a function call.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="R3">
              <text>Rvalue references: understand the meaning of ’&amp;&amp;’.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="R4">
              <text>For use of variable number of arguments, use variadic templates.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="R5">
              <text>Prefer ’using’ over ’typedef’ for introducing type name aliases.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="R6">
              <text>Prefer using range-based for-loops to iterate all elements of containers.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="4687" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="R7">
              <text>Use ’constexpr’ where possible.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="R8">
              <text>Prefer typed and class enums over "plain" enums.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="R9">
              <text>Follow the "rule of zero or three/five": If a class defines any of the special member functions, define all of them ("rule of three/five") or none of them ("rule of zero").</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2610" />
                <message mapped="yes" component="qacpp" id="2611" />
                <message mapped="yes" component="qacpp" id="2612" />
                <message mapped="yes" component="qacpp" id="2613" />
                <message mapped="yes" component="qacpp" id="2614" />
                <message mapped="yes" component="qacpp" id="2615" />
                <message mapped="yes" component="qacpp" id="2616" />
                <message mapped="yes" component="qacpp" id="2617" />
                <message mapped="yes" component="qacpp" id="2618" />
                <message mapped="yes" component="qacpp" id="2619" />
                <message mapped="yes" component="qacpp" id="2648" />
              </enforcement>
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
  <rulegroup name="C++ Name Rules">
    <rule help="" active="yes" id="1">
      <text>Naming and Layout Rules</text>
      <enforcement>
        <rule help="" active="yes" id="1.">
          <text>Generic</text>
          <enforcement>
            <rule help="" active="yes" id="1.1">
              <text>If a source file does not follow this naming/layout conventions: Follow the existing layout, or reformat the source file at once.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="1.2">
              <text>Use names that are self descriptive, do not use abbrevations.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="1.3">
              <text>Don'ts: Do not comment obvious properties of the code.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="1.4">
              <text>Use correct spelling, grammar and punctuation.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="1.5">
              <text>Use special keywords 'TODO' and 'DEPRECATED' to indicate incomplete or out-of-date code.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="2.">
          <text>File/Folder Naming</text>
          <enforcement>
            <rule help="" active="yes" id="2.1">
              <text> Use lower-case with componentname_ as prefix for file and directory names and references to file names (such as include directives).</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="3.">
          <text>Layout</text>
          <enforcement>
            <rule help="" active="yes" id="3.1">
              <text> A line shall not consist of more than 120 characters.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="1094" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="3.2">
              <text> The indentation depth shall be increased by four space characters and not tabs.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="3.3">
              <text>Always break before braces without indentation.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="3.4">
              <text> Use the C++ comment delimiters "//". Do not use the C comment delimiters "/*...*/".</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="3.5">
              <text>In general, pre-processor directives shall not be used. Write pre-processor directives to begin in column 1 with spaces between ’#’ and the pre-processor directive, representing nesting in preprocessor conditionals by 4 spaces per nesting level.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="3.6">
              <text> Organize ’class’ definitions by access level, in the following order: ’public’, ’protected’, ’private’.</text>
              <enforcement>
                <message mapped="yes" component="qacpp" id="2108" />
                <message mapped="yes" component="qacpp" id="2109" />
                <message mapped="yes" component="qacpp" id="2191" />
                <message mapped="yes" component="qacpp" id="2192" />
                <message mapped="yes" component="qacpp" id="2195" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="3.7">
              <text>Function layout shall have the return type and the function arguments on the same line if they fit.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="4.">
          <text>Naming</text>
          <enforcement>
            <rule help="" active="yes" id="4.1">
              <text> The following declarations are mandatory for the naming of compound types (enums, classes, structs and unions).</text>
              <enforcement>
                <message mapped="yes" component="namecheck" id="4801" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.2">
              <text> Identifiers for functions and class member functions shall follow the camelCase convention.</text>
              <enforcement>
                <message mapped="yes" component="namecheck" id="4802" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.3">
              <text> Use recommended identifiers for functions and class member functions with a common purpose.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="4.4">
              <text>Namespace names shall be all lowercase.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="4.5">
              <text>Macro names shall be all uppercase with underscore separators.</text>
              <enforcement>
                <message mapped="yes" component="namecheck" id="4803" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.6">
              <text> Identifiers for variables and symbolic constants shall satisfy the following conditions.</text>
              <enforcement>
                <message mapped="yes" component="namecheck" id="4804" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.7">
              <text> Identifiers for enumerators shall satisfy the following conditions.</text>
              <enforcement>
                <message mapped="yes" component="namecheck" id="4805" />
              </enforcement>
            </rule>
            <rule help="" active="yes" id="4.8">
              <text> Identifiers for template parameter shall satisfy the following conditions.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="4.9">
              <text> Include guards shall comply to the following naming.</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
        <rule help="" active="yes" id="5.">
          <text>Rules for externally provided SW (from external vendors)</text>
          <enforcement>
            <rule help="" active="yes" id="5.1">
              <text> Do not define names at file scope which start with rb/RB/Rb/rB.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="5.2">
              <text> Do not define macros which contains a lower case letter.</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="5.3">
              <text> Header filenames shall not begin with rb/RB/Rb/rB</text>
              <enforcement />
            </rule>
            <rule help="" active="yes" id="5.4">
              <text> Source filenames shall not begin with rb/RB/Rb/rB</text>
              <enforcement />
            </rule>
          </enforcement>
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
  <rulegroup name="Severity Levels 1.3">
    <rule help="" active="yes" id="severitylevels">
      <text>Severity Levels</text>
      <enforcement>
        <rule help="" active="yes" id="severitylevel9">
          <text>Severity Level 9</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="1067" />
            <message mapped="yes" component="qacpp" id="0131" />
            <message mapped="yes" component="rcma" id="1510" />
            <message mapped="yes" component="rcma" id="1509" />
            <message mapped="yes" component="rcma" id="1752" />
            <message mapped="yes" component="rcma" id="1753" />
            <message mapped="yes" component="qacpp" id="3095" />
            <message mapped="yes" component="qacpp" id="3096" />
            <message mapped="yes" component="qacpp" id="0014" />
            <message mapped="yes" component="qacpp" id="0029" />
            <message mapped="yes" component="qacpp" id="0467" />
            <message mapped="yes" component="qacpp" id="0468" />
            <message mapped="yes" component="qacpp" id="0040" />
            <message mapped="yes" component="qacpp" id="0022" />
            <message mapped="yes" component="qacpp" id="0611" />
            <message mapped="yes" component="qacpp" id="0021" />
            <message mapped="yes" component="qacpp" id="0032" />
            <message mapped="yes" component="qacpp" id="0130" />
            <message mapped="yes" component="qacpp" id="0403" />
            <message mapped="yes" component="qacpp" id="0705" />
            <message mapped="yes" component="qacpp" id="0706" />
            <message mapped="yes" component="qacpp" id="3063" />
            <message mapped="yes" component="qacpp" id="3064" />
            <message mapped="yes" component="qacpp" id="3605" />
            <message mapped="yes" component="qacpp" id="3606" />
            <message mapped="yes" component="qacpp" id="3607" />
            <message mapped="yes" component="qacpp" id="3842" />
            <message mapped="yes" component="qacpp" id="0145" />
            <message mapped="yes" component="qacpp" id="0064" />
            <message mapped="yes" component="qacpp" id="0080" />
            <message mapped="yes" component="qacpp" id="0010" />
            <message mapped="yes" component="qacpp" id="0011" />
            <message mapped="yes" component="qacpp" id="0012" />
            <message mapped="yes" component="qacpp" id="0013" />
            <message mapped="yes" component="qacpp" id="0015" />
            <message mapped="yes" component="qacpp" id="0016" />
            <message mapped="yes" component="qacpp" id="0017" />
            <message mapped="yes" component="qacpp" id="0018" />
            <message mapped="yes" component="qacpp" id="0019" />
            <message mapped="yes" component="qacpp" id="0020" />
            <message mapped="yes" component="qacpp" id="0023" />
            <message mapped="yes" component="qacpp" id="0024" />
            <message mapped="yes" component="qacpp" id="0025" />
            <message mapped="yes" component="qacpp" id="0026" />
            <message mapped="yes" component="qacpp" id="0027" />
            <message mapped="yes" component="qacpp" id="0028" />
            <message mapped="yes" component="qacpp" id="0030" />
            <message mapped="yes" component="qacpp" id="0031" />
            <message mapped="yes" component="qacpp" id="0034" />
            <message mapped="yes" component="qacpp" id="0035" />
            <message mapped="yes" component="qacpp" id="0036" />
            <message mapped="yes" component="qacpp" id="0037" />
            <message mapped="yes" component="qacpp" id="0039" />
            <message mapped="yes" component="qacpp" id="0043" />
            <message mapped="yes" component="qacpp" id="0045" />
            <message mapped="yes" component="qacpp" id="0046" />
            <message mapped="yes" component="qacpp" id="0047" />
            <message mapped="yes" component="qacpp" id="0048" />
            <message mapped="yes" component="qacpp" id="0050" />
            <message mapped="yes" component="qacpp" id="0051" />
            <message mapped="yes" component="qacpp" id="0052" />
            <message mapped="yes" component="qacpp" id="0053" />
            <message mapped="yes" component="qacpp" id="0054" />
            <message mapped="yes" component="qacpp" id="0056" />
            <message mapped="yes" component="qacpp" id="0057" />
            <message mapped="yes" component="qacpp" id="0058" />
            <message mapped="yes" component="qacpp" id="0059" />
            <message mapped="yes" component="qacpp" id="0060" />
            <message mapped="yes" component="qacpp" id="0061" />
            <message mapped="yes" component="qacpp" id="0063" />
            <message mapped="yes" component="qacpp" id="0066" />
            <message mapped="yes" component="qacpp" id="0067" />
            <message mapped="yes" component="qacpp" id="0068" />
            <message mapped="yes" component="qacpp" id="0069" />
            <message mapped="yes" component="qacpp" id="0070" />
            <message mapped="yes" component="qacpp" id="0071" />
            <message mapped="yes" component="qacpp" id="0072" />
            <message mapped="yes" component="qacpp" id="0073" />
            <message mapped="yes" component="qacpp" id="0074" />
            <message mapped="yes" component="qacpp" id="0075" />
            <message mapped="yes" component="qacpp" id="0076" />
            <message mapped="yes" component="qacpp" id="0077" />
            <message mapped="yes" component="qacpp" id="0078" />
            <message mapped="yes" component="qacpp" id="0083" />
            <message mapped="yes" component="qacpp" id="0084" />
            <message mapped="yes" component="qacpp" id="0085" />
            <message mapped="yes" component="qacpp" id="0086" />
            <message mapped="yes" component="qacpp" id="0087" />
            <message mapped="yes" component="qacpp" id="0088" />
            <message mapped="yes" component="qacpp" id="0089" />
            <message mapped="yes" component="qacpp" id="0090" />
            <message mapped="yes" component="qacpp" id="0091" />
            <message mapped="yes" component="qacpp" id="0092" />
            <message mapped="yes" component="qacpp" id="0094" />
            <message mapped="yes" component="qacpp" id="0095" />
            <message mapped="yes" component="qacpp" id="0097" />
            <message mapped="yes" component="qacpp" id="0100" />
            <message mapped="yes" component="qacpp" id="0101" />
            <message mapped="yes" component="qacpp" id="0103" />
            <message mapped="yes" component="qacpp" id="0104" />
            <message mapped="yes" component="qacpp" id="0105" />
            <message mapped="yes" component="qacpp" id="0107" />
            <message mapped="yes" component="qacpp" id="0108" />
            <message mapped="yes" component="qacpp" id="0114" />
            <message mapped="yes" component="qacpp" id="0115" />
            <message mapped="yes" component="qacpp" id="0117" />
            <message mapped="yes" component="qacpp" id="0118" />
            <message mapped="yes" component="qacpp" id="0122" />
            <message mapped="yes" component="qacpp" id="0124" />
            <message mapped="yes" component="qacpp" id="0125" />
            <message mapped="yes" component="qacpp" id="0126" />
            <message mapped="yes" component="qacpp" id="0127" />
            <message mapped="yes" component="qacpp" id="0128" />
            <message mapped="yes" component="qacpp" id="0129" />
            <message mapped="yes" component="qacpp" id="0133" />
            <message mapped="yes" component="qacpp" id="0134" />
            <message mapped="yes" component="qacpp" id="0135" />
            <message mapped="yes" component="qacpp" id="0136" />
            <message mapped="yes" component="qacpp" id="0137" />
            <message mapped="yes" component="qacpp" id="0139" />
            <message mapped="yes" component="qacpp" id="0140" />
            <message mapped="yes" component="qacpp" id="0141" />
            <message mapped="yes" component="qacpp" id="0142" />
            <message mapped="yes" component="qacpp" id="0143" />
            <message mapped="yes" component="qacpp" id="0144" />
            <message mapped="yes" component="qacpp" id="0146" />
            <message mapped="yes" component="qacpp" id="0147" />
            <message mapped="yes" component="qacpp" id="0148" />
            <message mapped="yes" component="qacpp" id="0149" />
            <message mapped="yes" component="qacpp" id="0150" />
            <message mapped="yes" component="qacpp" id="0152" />
            <message mapped="yes" component="qacpp" id="0153" />
            <message mapped="yes" component="qacpp" id="0154" />
            <message mapped="yes" component="qacpp" id="0155" />
            <message mapped="yes" component="qacpp" id="0156" />
            <message mapped="yes" component="qacpp" id="0157" />
            <message mapped="yes" component="qacpp" id="0158" />
            <message mapped="yes" component="qacpp" id="0159" />
            <message mapped="yes" component="qacpp" id="0160" />
            <message mapped="yes" component="qacpp" id="0161" />
            <message mapped="yes" component="qacpp" id="0162" />
            <message mapped="yes" component="qacpp" id="0163" />
            <message mapped="yes" component="qacpp" id="0164" />
            <message mapped="yes" component="qacpp" id="0165" />
            <message mapped="yes" component="qacpp" id="0166" />
            <message mapped="yes" component="qacpp" id="0167" />
            <message mapped="yes" component="qacpp" id="0168" />
            <message mapped="yes" component="qacpp" id="0169" />
            <message mapped="yes" component="qacpp" id="0170" />
            <message mapped="yes" component="qacpp" id="0172" />
            <message mapped="yes" component="qacpp" id="0173" />
            <message mapped="yes" component="qacpp" id="0174" />
            <message mapped="yes" component="qacpp" id="0175" />
            <message mapped="yes" component="qacpp" id="0176" />
            <message mapped="yes" component="qacpp" id="0177" />
            <message mapped="yes" component="qacpp" id="0178" />
            <message mapped="yes" component="qacpp" id="0179" />
            <message mapped="yes" component="qacpp" id="0180" />
            <message mapped="yes" component="qacpp" id="0181" />
            <message mapped="yes" component="qacpp" id="0182" />
            <message mapped="yes" component="qacpp" id="0183" />
            <message mapped="yes" component="qacpp" id="0184" />
            <message mapped="yes" component="qacpp" id="0185" />
            <message mapped="yes" component="qacpp" id="0186" />
            <message mapped="yes" component="qacpp" id="0187" />
            <message mapped="yes" component="qacpp" id="0189" />
            <message mapped="yes" component="qacpp" id="0190" />
            <message mapped="yes" component="qacpp" id="0191" />
            <message mapped="yes" component="qacpp" id="0192" />
            <message mapped="yes" component="qacpp" id="0193" />
            <message mapped="yes" component="qacpp" id="0194" />
            <message mapped="yes" component="qacpp" id="0195" />
            <message mapped="yes" component="qacpp" id="0196" />
            <message mapped="yes" component="qacpp" id="0197" />
            <message mapped="yes" component="qacpp" id="0198" />
            <message mapped="yes" component="qacpp" id="0199" />
            <message mapped="yes" component="qacpp" id="0200" />
            <message mapped="yes" component="qacpp" id="0201" />
            <message mapped="yes" component="qacpp" id="0202" />
            <message mapped="yes" component="qacpp" id="0203" />
            <message mapped="yes" component="qacpp" id="0204" />
            <message mapped="yes" component="qacpp" id="0205" />
            <message mapped="yes" component="qacpp" id="0206" />
            <message mapped="yes" component="qacpp" id="0207" />
            <message mapped="yes" component="qacpp" id="0208" />
            <message mapped="yes" component="qacpp" id="0209" />
            <message mapped="yes" component="qacpp" id="0210" />
            <message mapped="yes" component="qacpp" id="0211" />
            <message mapped="yes" component="qacpp" id="0220" />
            <message mapped="yes" component="qacpp" id="0221" />
            <message mapped="yes" component="qacpp" id="0222" />
            <message mapped="yes" component="qacpp" id="0223" />
            <message mapped="yes" component="qacpp" id="0224" />
            <message mapped="yes" component="qacpp" id="0225" />
            <message mapped="yes" component="qacpp" id="0226" />
            <message mapped="yes" component="qacpp" id="0227" />
            <message mapped="yes" component="qacpp" id="0228" />
            <message mapped="yes" component="qacpp" id="0229" />
            <message mapped="yes" component="qacpp" id="0231" />
            <message mapped="yes" component="qacpp" id="0232" />
            <message mapped="yes" component="qacpp" id="0233" />
            <message mapped="yes" component="qacpp" id="0236" />
            <message mapped="yes" component="qacpp" id="0237" />
            <message mapped="yes" component="qacpp" id="0238" />
            <message mapped="yes" component="qacpp" id="0239" />
            <message mapped="yes" component="qacpp" id="0240" />
            <message mapped="yes" component="qacpp" id="0241" />
            <message mapped="yes" component="qacpp" id="0242" />
            <message mapped="yes" component="qacpp" id="0243" />
            <message mapped="yes" component="qacpp" id="0245" />
            <message mapped="yes" component="qacpp" id="0246" />
            <message mapped="yes" component="qacpp" id="0247" />
            <message mapped="yes" component="qacpp" id="0248" />
            <message mapped="yes" component="qacpp" id="0249" />
            <message mapped="yes" component="qacpp" id="0250" />
            <message mapped="yes" component="qacpp" id="0251" />
            <message mapped="yes" component="qacpp" id="0252" />
            <message mapped="yes" component="qacpp" id="0253" />
            <message mapped="yes" component="qacpp" id="0254" />
            <message mapped="yes" component="qacpp" id="0255" />
            <message mapped="yes" component="qacpp" id="0256" />
            <message mapped="yes" component="qacpp" id="0257" />
            <message mapped="yes" component="qacpp" id="0258" />
            <message mapped="yes" component="qacpp" id="0259" />
            <message mapped="yes" component="qacpp" id="0260" />
            <message mapped="yes" component="qacpp" id="0262" />
            <message mapped="yes" component="qacpp" id="0263" />
            <message mapped="yes" component="qacpp" id="0264" />
            <message mapped="yes" component="qacpp" id="0265" />
            <message mapped="yes" component="qacpp" id="0266" />
            <message mapped="yes" component="qacpp" id="0267" />
            <message mapped="yes" component="qacpp" id="0268" />
            <message mapped="yes" component="qacpp" id="0269" />
            <message mapped="yes" component="qacpp" id="0271" />
            <message mapped="yes" component="qacpp" id="0272" />
            <message mapped="yes" component="qacpp" id="0273" />
            <message mapped="yes" component="qacpp" id="0274" />
            <message mapped="yes" component="qacpp" id="0275" />
            <message mapped="yes" component="qacpp" id="0276" />
            <message mapped="yes" component="qacpp" id="0277" />
            <message mapped="yes" component="qacpp" id="0280" />
            <message mapped="yes" component="qacpp" id="0281" />
            <message mapped="yes" component="qacpp" id="0282" />
            <message mapped="yes" component="qacpp" id="0283" />
            <message mapped="yes" component="qacpp" id="0284" />
            <message mapped="yes" component="qacpp" id="0285" />
            <message mapped="yes" component="qacpp" id="0286" />
            <message mapped="yes" component="qacpp" id="0287" />
            <message mapped="yes" component="qacpp" id="0288" />
            <message mapped="yes" component="qacpp" id="0289" />
            <message mapped="yes" component="qacpp" id="0290" />
            <message mapped="yes" component="qacpp" id="0291" />
            <message mapped="yes" component="qacpp" id="0292" />
            <message mapped="yes" component="qacpp" id="0293" />
            <message mapped="yes" component="qacpp" id="0294" />
            <message mapped="yes" component="qacpp" id="0295" />
            <message mapped="yes" component="qacpp" id="0296" />
            <message mapped="yes" component="qacpp" id="0297" />
            <message mapped="yes" component="qacpp" id="0298" />
            <message mapped="yes" component="qacpp" id="0299" />
            <message mapped="yes" component="qacpp" id="0301" />
            <message mapped="yes" component="qacpp" id="0302" />
            <message mapped="yes" component="qacpp" id="0303" />
            <message mapped="yes" component="qacpp" id="0304" />
            <message mapped="yes" component="qacpp" id="0305" />
            <message mapped="yes" component="qacpp" id="0306" />
            <message mapped="yes" component="qacpp" id="0307" />
            <message mapped="yes" component="qacpp" id="0308" />
            <message mapped="yes" component="qacpp" id="0309" />
            <message mapped="yes" component="qacpp" id="0310" />
            <message mapped="yes" component="qacpp" id="0311" />
            <message mapped="yes" component="qacpp" id="0400" />
            <message mapped="yes" component="qacpp" id="0401" />
            <message mapped="yes" component="qacpp" id="0404" />
            <message mapped="yes" component="qacpp" id="0405" />
            <message mapped="yes" component="qacpp" id="0406" />
            <message mapped="yes" component="qacpp" id="0415" />
            <message mapped="yes" component="qacpp" id="0424" />
            <message mapped="yes" component="qacpp" id="0429" />
            <message mapped="yes" component="qacpp" id="0435" />
            <message mapped="yes" component="qacpp" id="0439" />
            <message mapped="yes" component="qacpp" id="0440" />
            <message mapped="yes" component="qacpp" id="0441" />
            <message mapped="yes" component="qacpp" id="0445" />
            <message mapped="yes" component="qacpp" id="0446" />
            <message mapped="yes" component="qacpp" id="0447" />
            <message mapped="yes" component="qacpp" id="0448" />
            <message mapped="yes" component="qacpp" id="0450" />
            <message mapped="yes" component="qacpp" id="0451" />
            <message mapped="yes" component="qacpp" id="0453" />
            <message mapped="yes" component="qacpp" id="0454" />
            <message mapped="yes" component="qacpp" id="0455" />
            <message mapped="yes" component="qacpp" id="0456" />
            <message mapped="yes" component="qacpp" id="0457" />
            <message mapped="yes" component="qacpp" id="0458" />
            <message mapped="yes" component="qacpp" id="0459" />
            <message mapped="yes" component="qacpp" id="0461" />
            <message mapped="yes" component="qacpp" id="0462" />
            <message mapped="yes" component="qacpp" id="0464" />
            <message mapped="yes" component="qacpp" id="0465" />
            <message mapped="yes" component="qacpp" id="0466" />
            <message mapped="yes" component="qacpp" id="0469" />
            <message mapped="yes" component="qacpp" id="0471" />
            <message mapped="yes" component="qacpp" id="0473" />
            <message mapped="yes" component="qacpp" id="0475" />
            <message mapped="yes" component="qacpp" id="0479" />
            <message mapped="yes" component="qacpp" id="0480" />
            <message mapped="yes" component="qacpp" id="0481" />
            <message mapped="yes" component="qacpp" id="0482" />
            <message mapped="yes" component="qacpp" id="0483" />
            <message mapped="yes" component="qacpp" id="0484" />
            <message mapped="yes" component="qacpp" id="0485" />
            <message mapped="yes" component="qacpp" id="0486" />
            <message mapped="yes" component="qacpp" id="0487" />
            <message mapped="yes" component="qacpp" id="0488" />
            <message mapped="yes" component="qacpp" id="0489" />
            <message mapped="yes" component="qacpp" id="0490" />
            <message mapped="yes" component="qacpp" id="0491" />
            <message mapped="yes" component="qacpp" id="0600" />
            <message mapped="yes" component="qacpp" id="0601" />
            <message mapped="yes" component="qacpp" id="0602" />
            <message mapped="yes" component="qacpp" id="0603" />
            <message mapped="yes" component="qacpp" id="0604" />
            <message mapped="yes" component="qacpp" id="0606" />
            <message mapped="yes" component="qacpp" id="0607" />
            <message mapped="yes" component="qacpp" id="0608" />
            <message mapped="yes" component="qacpp" id="0609" />
            <message mapped="yes" component="qacpp" id="0610" />
            <message mapped="yes" component="qacpp" id="0612" />
            <message mapped="yes" component="qacpp" id="0613" />
            <message mapped="yes" component="qacpp" id="0616" />
            <message mapped="yes" component="qacpp" id="0617" />
            <message mapped="yes" component="qacpp" id="0618" />
            <message mapped="yes" component="qacpp" id="0619" />
            <message mapped="yes" component="qacpp" id="0620" />
            <message mapped="yes" component="qacpp" id="0621" />
            <message mapped="yes" component="qacpp" id="0623" />
            <message mapped="yes" component="qacpp" id="0624" />
            <message mapped="yes" component="qacpp" id="0625" />
            <message mapped="yes" component="qacpp" id="0627" />
            <message mapped="yes" component="qacpp" id="0628" />
            <message mapped="yes" component="qacpp" id="0629" />
            <message mapped="yes" component="qacpp" id="0630" />
            <message mapped="yes" component="qacpp" id="0631" />
            <message mapped="yes" component="qacpp" id="0800" />
            <message mapped="yes" component="qacpp" id="0801" />
            <message mapped="yes" component="qacpp" id="0802" />
            <message mapped="yes" component="qacpp" id="0803" />
            <message mapped="yes" component="qacpp" id="0804" />
            <message mapped="yes" component="qacpp" id="0805" />
            <message mapped="yes" component="qacpp" id="0996" />
            <message mapped="yes" component="qacpp" id="1124" />
            <message mapped="yes" component="qacpp" id="1131" />
            <message mapped="yes" component="qacpp" id="1133" />
            <message mapped="yes" component="qacpp" id="1134" />
            <message mapped="yes" component="qacpp" id="1140" />
            <message mapped="yes" component="qacpp" id="1141" />
            <message mapped="yes" component="qacpp" id="1144" />
            <message mapped="yes" component="qacpp" id="1145" />
            <message mapped="yes" component="qacpp" id="1146" />
            <message mapped="yes" component="qacpp" id="1148" />
            <message mapped="yes" component="qacpp" id="1149" />
            <message mapped="yes" component="qacpp" id="1150" />
            <message mapped="yes" component="qacpp" id="1151" />
            <message mapped="yes" component="qacpp" id="1152" />
            <message mapped="yes" component="qacpp" id="1950" />
            <message mapped="yes" component="qacpp" id="1951" />
            <message mapped="yes" component="qacpp" id="1962" />
            <message mapped="yes" component="qacpp" id="1963" />
            <message mapped="yes" component="qacpp" id="1964" />
            <message mapped="yes" component="qacpp" id="1965" />
            <message mapped="yes" component="qacpp" id="1966" />
            <message mapped="yes" component="qacpp" id="1967" />
            <message mapped="yes" component="qacpp" id="1968" />
            <message mapped="yes" component="qacpp" id="1969" />
            <message mapped="yes" component="qacpp" id="1970" />
            <message mapped="yes" component="qacpp" id="1971" />
            <message mapped="yes" component="qacpp" id="1972" />
            <message mapped="yes" component="qacpp" id="1973" />
            <message mapped="yes" component="qacpp" id="1974" />
            <message mapped="yes" component="qacpp" id="1975" />
            <message mapped="yes" component="qacpp" id="1976" />
            <message mapped="yes" component="qacpp" id="1977" />
            <message mapped="yes" component="qacpp" id="1978" />
            <message mapped="yes" component="qacpp" id="1979" />
            <message mapped="yes" component="qacpp" id="1980" />
            <message mapped="yes" component="qacpp" id="1982" />
            <message mapped="yes" component="qacpp" id="1984" />
            <message mapped="yes" component="qacpp" id="1985" />
            <message mapped="yes" component="qacpp" id="1986" />
            <message mapped="yes" component="qacpp" id="1987" />
            <message mapped="yes" component="qacpp" id="1989" />
            <message mapped="yes" component="qacpp" id="1990" />
            <message mapped="yes" component="qacpp" id="1991" />
            <message mapped="yes" component="qacpp" id="2316" />
            <message mapped="yes" component="qacpp" id="2317" />
            <message mapped="yes" component="qacpp" id="3036" />
            <message mapped="yes" component="qacpp" id="3104" />
            <message mapped="yes" component="qacpp" id="3291" />
            <message mapped="yes" component="qacpp" id="4100" />
            <message mapped="yes" component="qacpp" id="4300" />
            <message mapped="yes" component="qacpp" id="4306" />
            <message mapped="yes" component="qacpp" id="4647" />
            <message mapped="yes" component="qacpp" id="4651" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel8">
          <text>Severity Level 8</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="3802" />
            <message mapped="yes" component="qacpp" id="3803" />
            <message mapped="yes" component="qacpp" id="3804" />
            <message mapped="yes" component="qacpp" id="2776" />
            <message mapped="yes" component="qacpp" id="2777" />
            <message mapped="yes" component="qacpp" id="2791" />
            <message mapped="yes" component="qacpp" id="2792" />
            <message mapped="yes" component="qacpp" id="2800" />
            <message mapped="yes" component="qacpp" id="2801" />
            <message mapped="yes" component="qacpp" id="2802" />
            <message mapped="yes" component="qacpp" id="2810" />
            <message mapped="yes" component="qacpp" id="2811" />
            <message mapped="yes" component="qacpp" id="2812" />
            <message mapped="yes" component="qacpp" id="2820" />
            <message mapped="yes" component="qacpp" id="2821" />
            <message mapped="yes" component="qacpp" id="2822" />
            <message mapped="yes" component="qacpp" id="2831" />
            <message mapped="yes" component="qacpp" id="2832" />
            <message mapped="yes" component="qacpp" id="2840" />
            <message mapped="yes" component="qacpp" id="2841" />
            <message mapped="yes" component="qacpp" id="2842" />
            <message mapped="yes" component="qacpp" id="2861" />
            <message mapped="yes" component="qacpp" id="2862" />
            <message mapped="yes" component="qacpp" id="2935" />
            <message mapped="yes" component="qacpp" id="2936" />
            <message mapped="yes" component="qacpp" id="2937" />
            <message mapped="yes" component="qacpp" id="2961" />
            <message mapped="yes" component="qacpp" id="2962" />
            <message mapped="yes" component="qacpp" id="2971" />
            <message mapped="yes" component="qacpp" id="2972" />
            <message mapped="yes" component="qacpp" id="4126" />
            <message mapped="yes" component="qacpp" id="4127" />
            <message mapped="yes" component="qacpp" id="2427" />
            <message mapped="yes" component="qacpp" id="3220" />
            <message mapped="yes" component="qacpp" id="3221" />
            <message mapped="yes" component="qacpp" id="3000" />
            <message mapped="yes" component="qacpp" id="3139" />
            <message mapped="yes" component="qacpp" id="3140" />
            <message mapped="yes" component="qacpp" id="3143" />
            <message mapped="yes" component="qacpp" id="3010" />
            <message mapped="yes" component="qacpp" id="3012" />
            <message mapped="yes" component="qacpp" id="3014" />
            <message mapped="yes" component="qacpp" id="3018" />
            <message mapped="yes" component="qacpp" id="2930" />
            <message mapped="yes" component="qacpp" id="2931" />
            <message mapped="yes" component="qacpp" id="2932" />
            <message mapped="yes" component="qacpp" id="2668" />
            <message mapped="yes" component="qacpp" id="2771" />
            <message mapped="yes" component="qacpp" id="2772" />
            <message mapped="yes" component="qacpp" id="2669" />
            <message mapped="yes" component="qacpp" id="3003" />
            <message mapped="yes" component="qacpp" id="3004" />
            <message mapped="yes" component="qacpp" id="3006" />
            <message mapped="yes" component="qacpp" id="3321" />
            <message mapped="yes" component="qacpp" id="3070" />
            <message mapped="yes" component="qacpp" id="3076" />
            <message mapped="yes" component="qacpp" id="3077" />
            <message mapped="yes" component="qacpp" id="3060" />
            <message mapped="yes" component="qacpp" id="3061" />
            <message mapped="yes" component="qacpp" id="3066" />
            <message mapped="yes" component="qacpp" id="3048" />
            <message mapped="yes" component="qacpp" id="3085" />
            <message mapped="yes" component="qacpp" id="3086" />
            <message mapped="yes" component="qacpp" id="3087" />
            <message mapped="yes" component="qacpp" id="3088" />
            <message mapped="yes" component="qacpp" id="3089" />
            <message mapped="yes" component="qacpp" id="3090" />
            <message mapped="yes" component="qacpp" id="3091" />
            <message mapped="yes" component="qacpp" id="3092" />
            <message mapped="yes" component="qacpp" id="3093" />
            <message mapped="yes" component="qacpp" id="3094" />
            <message mapped="yes" component="qacpp" id="3103" />
            <message mapped="yes" component="qacpp" id="3105" />
            <message mapped="yes" component="qacpp" id="3106" />
            <message mapped="yes" component="qacpp" id="3107" />
            <message mapped="yes" component="qacpp" id="3108" />
            <message mapped="yes" component="qacpp" id="3041" />
            <message mapped="yes" component="qacpp" id="3043" />
            <message mapped="yes" component="qacpp" id="3045" />
            <message mapped="yes" component="qacpp" id="3047" />
            <message mapped="yes" component="qacpp" id="3040" />
            <message mapped="yes" component="qacpp" id="3042" />
            <message mapped="yes" component="qacpp" id="3044" />
            <message mapped="yes" component="qacpp" id="3046" />
            <message mapped="yes" component="qacpp" id="3002" />
            <message mapped="yes" component="qacpp" id="3005" />
            <message mapped="yes" component="qacpp" id="3322" />
            <message mapped="yes" component="qacpp" id="3323" />
            <message mapped="yes" component="qacpp" id="4222" />
            <message mapped="yes" component="qacpp" id="2910" />
            <message mapped="yes" component="qacpp" id="2911" />
            <message mapped="yes" component="qacpp" id="2912" />
            <message mapped="yes" component="qacpp" id="3902" />
            <message mapped="yes" component="qacpp" id="3903" />
            <message mapped="yes" component="qacpp" id="3904" />
            <message mapped="yes" component="qacpp" id="3905" />
            <message mapped="yes" component="qacpp" id="4071" />
            <message mapped="yes" component="qacpp" id="3270" />
            <message mapped="yes" component="qacpp" id="4011" />
            <message mapped="yes" component="qacpp" id="4612" />
            <message mapped="yes" component="qacpp" id="3013" />
            <message mapped="yes" component="qacpp" id="4026" />
            <message mapped="yes" component="qacpp" id="4027" />
            <message mapped="yes" component="qacpp" id="2515" />
            <message mapped="yes" component="qacpp" id="2527" />
            <message mapped="yes" component="qacpp" id="4028" />
            <message mapped="yes" component="qacpp" id="4624" />
            <message mapped="yes" component="rcma" id="1520" />
            <message mapped="yes" component="rcma" id="1521" />
            <message mapped="yes" component="qacpp" id="2018" />
            <message mapped="yes" component="qacpp" id="2012" />
            <message mapped="yes" component="qacpp" id="2176" />
            <message mapped="yes" component="qacpp" id="4260" />
            <message mapped="yes" component="qacpp" id="4261" />
            <message mapped="yes" component="qacpp" id="4273" />
            <message mapped="yes" component="qacpp" id="4274" />
            <message mapped="yes" component="qacpp" id="4275" />
            <message mapped="yes" component="qacpp" id="4276" />
            <message mapped="yes" component="qacpp" id="4277" />
            <message mapped="yes" component="qacpp" id="4278" />
            <message mapped="yes" component="qacpp" id="4279" />
            <message mapped="yes" component="qacpp" id="4280" />
            <message mapped="yes" component="qacpp" id="4281" />
            <message mapped="yes" component="qacpp" id="4282" />
            <message mapped="yes" component="qacpp" id="2087" />
            <message mapped="yes" component="qacpp" id="3336" />
            <message mapped="yes" component="qacpp" id="0055" />
            <message mapped="yes" component="qacpp" id="1032" />
            <message mapped="yes" component="qacpp" id="1033" />
            <message mapped="yes" component="qacpp" id="1000" />
            <message mapped="yes" component="qacpp" id="1001" />
            <message mapped="yes" component="mcpp" id="5171" />
            <message mapped="yes" component="mcpp" id="5172" />
            <message mapped="yes" component="mcpp" id="5173" />
            <message mapped="yes" component="mcpp" id="5174" />
            <message mapped="yes" component="mcpp" id="5175" />
            <message mapped="yes" component="mcpp" id="5176" />
            <message mapped="yes" component="mcpp" id="5177" />
            <message mapped="yes" component="mcpp" id="5178" />
            <message mapped="yes" component="mcpp" id="5179" />
            <message mapped="yes" component="mcpp" id="5180" />
            <message mapped="yes" component="mcpp" id="5181" />
            <message mapped="yes" component="mcpp" id="5182" />
            <message mapped="yes" component="mcpp" id="5183" />
            <message mapped="yes" component="mcpp" id="5020" />
            <message mapped="yes" component="mcpp" id="5023" />
            <message mapped="yes" component="mcpp" id="5024" />
            <message mapped="yes" component="mcpp" id="5025" />
            <message mapped="yes" component="mcpp" id="5186" />
            <message mapped="yes" component="mcpp" id="5029" />
            <message mapped="yes" component="mcpp" id="5018" />
            <message mapped="yes" component="mcpp" id="5118" />
            <message mapped="yes" component="mcpp" id="5123" />
            <message mapped="yes" component="mcpp" id="5187" />
            <message mapped="yes" component="mcpp" id="5127" />
            <message mapped="yes" component="mcpp" id="5188" />
            <message mapped="yes" component="qacpp" id="2625" />
            <message mapped="yes" component="qacpp" id="3228" />
            <message mapped="yes" component="qacpp" id="2966" />
            <message mapped="yes" component="qacpp" id="2967" />
            <message mapped="yes" component="qacpp" id="2976" />
            <message mapped="yes" component="qacpp" id="2977" />
            <message mapped="yes" component="qacpp" id="4003" />
            <message mapped="yes" component="qacpp" id="4671" />
            <message mapped="yes" component="qacpp" id="3805" />
            <message mapped="yes" component="qacpp" id="3806" />
            <message mapped="yes" component="qacpp" id="4074" />
            <message mapped="yes" component="qacpp" id="2850" />
            <message mapped="yes" component="qacpp" id="2851" />
            <message mapped="yes" component="qacpp" id="2852" />
            <message mapped="yes" component="qacpp" id="2855" />
            <message mapped="yes" component="qacpp" id="2856" />
            <message mapped="yes" component="qacpp" id="2857" />
            <message mapped="yes" component="qacpp" id="2890" />
            <message mapped="yes" component="qacpp" id="2891" />
            <message mapped="yes" component="qacpp" id="2892" />
            <message mapped="yes" component="qacpp" id="2895" />
            <message mapped="yes" component="qacpp" id="2896" />
            <message mapped="yes" component="qacpp" id="2897" />
            <message mapped="yes" component="qacpp" id="2900" />
            <message mapped="yes" component="qacpp" id="2901" />
            <message mapped="yes" component="qacpp" id="2902" />
            <message mapped="yes" component="qacpp" id="2905" />
            <message mapped="yes" component="qacpp" id="2906" />
            <message mapped="yes" component="qacpp" id="2907" />
            <message mapped="yes" component="qacpp" id="2761" />
            <message mapped="yes" component="qacpp" id="2762" />
            <message mapped="yes" component="qacpp" id="3072" />
            <message mapped="yes" component="qacpp" id="3073" />
            <message mapped="yes" component="qacpp" id="2950" />
            <message mapped="yes" component="qacpp" id="2951" />
            <message mapped="yes" component="qacpp" id="2952" />
            <message mapped="yes" component="qacpp" id="0145" />
            <message mapped="yes" component="qacpp" id="2845" />
            <message mapped="yes" component="qacpp" id="2846" />
            <message mapped="yes" component="qacpp" id="2847" />
            <message mapped="yes" component="certcppcm" id="5006" />
            <message mapped="yes" component="certcppcm" id="5015" />
            <message mapped="yes" component="qacpp" id="2071" />
            <message mapped="yes" component="qacpp" id="2072" />
            <message mapped="yes" component="qacpp" id="2073" />
            <message mapped="yes" component="qacpp" id="6040" />
            <message mapped="yes" component="qacpp" id="6041" />
            <message mapped="yes" component="qacpp" id="6042" />
            <message mapped="yes" component="qacpp" id="6043" />
            <message mapped="yes" component="qacpp" id="6044" />
            <message mapped="yes" component="qacpp" id="4101" />
            <message mapped="yes" component="qacpp" id="2410" />
            <message mapped="yes" component="qacpp" id="2610" />
            <message mapped="yes" component="qacpp" id="2611" />
            <message mapped="yes" component="qacpp" id="2612" />
            <message mapped="yes" component="qacpp" id="2613" />
            <message mapped="yes" component="qacpp" id="2614" />
            <message mapped="yes" component="qacpp" id="2615" />
            <message mapped="yes" component="qacpp" id="2616" />
            <message mapped="yes" component="qacpp" id="2617" />
            <message mapped="yes" component="qacpp" id="2618" />
            <message mapped="yes" component="qacpp" id="2619" />
            <message mapped="yes" component="qacpp" id="2648" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel7">
          <text>Severity Level 7</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="1053" />
            <message mapped="yes" component="qacpp" id="2500" />
            <message mapped="yes" component="qacpp" id="2501" />
            <message mapped="yes" component="qacpp" id="2502" />
            <message mapped="yes" component="qacpp" id="2503" />
            <message mapped="yes" component="qacpp" id="2504" />
            <message mapped="yes" component="qacpp" id="2505" />
            <message mapped="yes" component="qacpp" id="2510" />
            <message mapped="yes" component="qacpp" id="2511" />
            <message mapped="yes" component="qacpp" id="2430" />
            <message mapped="yes" component="qacpp" id="2431" />
            <message mapped="yes" component="qacpp" id="2432" />
            <message mapped="yes" component="qacpp" id="3011" />
            <message mapped="yes" component="qacpp" id="3015" />
            <message mapped="yes" component="qacpp" id="3131" />
            <message mapped="yes" component="qacpp" id="3132" />
            <message mapped="yes" component="qacpp" id="3133" />
            <message mapped="yes" component="qacpp" id="3134" />
            <message mapped="yes" component="qacpp" id="3135" />
            <message mapped="yes" component="qacpp" id="3136" />
            <message mapped="yes" component="qacpp" id="3137" />
            <message mapped="yes" component="qacpp" id="3138" />
            <message mapped="yes" component="qacpp" id="3840" />
            <message mapped="yes" component="qacpp" id="3230" />
            <message mapped="yes" component="qacpp" id="4213" />
            <message mapped="yes" component="qacpp" id="4673" />
            <message mapped="yes" component="qacpp" id="2888" />
            <message mapped="yes" component="qacpp" id="4022" />
            <message mapped="yes" component="qacpp" id="4623" />
            <message mapped="yes" component="qacpp" id="4625" />
            <message mapped="yes" component="qacpp" id="4627" />
            <message mapped="yes" component="qacpp" id="4628" />
            <message mapped="yes" component="qacpp" id="1030" />
            <message mapped="yes" component="qacpp" id="4053" />
            <message mapped="yes" component="qacpp" id="2120" />
            <message mapped="yes" component="qacpp" id="3820" />
            <message mapped="yes" component="qacpp" id="2304" />
            <message mapped="yes" component="qacpp" id="2305" />
            <message mapped="yes" component="qacpp" id="2306" />
            <message mapped="yes" component="qacpp" id="2308" />
            <message mapped="yes" component="qacpp" id="2309" />
            <message mapped="yes" component="qacpp" id="2321" />
            <message mapped="yes" component="qacpp" id="4285" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel6">
          <text>Severity Level 6</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="2880" />
            <message mapped="yes" component="qacpp" id="2881" />
            <message mapped="yes" component="qacpp" id="2991" />
            <message mapped="yes" component="qacpp" id="2992" />
            <message mapped="yes" component="qacpp" id="2994" />
            <message mapped="yes" component="rcma" id="1500" />
            <message mapped="yes" component="rcma" id="1502" />
            <message mapped="yes" component="qacpp" id="4208" />
            <message mapped="yes" component="qacpp" id="2982" />
            <message mapped="yes" component="qacpp" id="2983" />
            <message mapped="yes" component="qacpp" id="2981" />
            <message mapped="yes" component="qacpp" id="0635" />
            <message mapped="yes" component="qacpp" id="0636" />
            <message mapped="yes" component="qacpp" id="3709" />
            <message mapped="yes" component="qacpp" id="3710" />
            <message mapped="yes" component="qacpp" id="3711" />
            <message mapped="yes" component="qacpp" id="3712" />
            <message mapped="yes" component="qacpp" id="3713" />
            <message mapped="yes" component="qacpp" id="3714" />
            <message mapped="yes" component="qacpp" id="3130" />
            <message mapped="yes" component="qacpp" id="3715" />
            <message mapped="yes" component="qacpp" id="3716" />
            <message mapped="yes" component="qacpp" id="3705" />
            <message mapped="yes" component="qacpp" id="3706" />
            <message mapped="yes" component="qacpp" id="2092" />
            <message mapped="yes" component="qacpp" id="3240" />
            <message mapped="yes" component="qacpp" id="4232" />
            <message mapped="yes" component="qacpp" id="4234" />
            <message mapped="yes" component="qacpp" id="4243" />
            <message mapped="yes" component="qacpp" id="4244" />
            <message mapped="yes" component="qacpp" id="2040" />
            <message mapped="yes" component="qacpp" id="2041" />
            <message mapped="yes" component="qacpp" id="2151" />
            <message mapped="yes" component="qacpp" id="2150" />
            <message mapped="yes" component="qacpp" id="2159" />
            <message mapped="yes" component="qacpp" id="4052" />
            <message mapped="yes" component="qacpp" id="4054" />
            <message mapped="yes" component="qacpp" id="2180" />
            <message mapped="yes" component="qacpp" id="3050" />
            <message mapped="yes" component="qacpp" id="2638" />
            <message mapped="yes" component="qacpp" id="2639" />
            <message mapped="yes" component="qacpp" id="2088" />
            <message mapped="yes" component="qacpp" id="3843" />
            <message mapped="yes" component="qacpp" id="3844" />
            <message mapped="yes" component="qacpp" id="1034" />
            <message mapped="yes" component="qacpp" id="1035" />
            <message mapped="yes" component="qacpp" id="1072" />
            <message mapped="yes" component="certcppcm" id="5003" />
            <message mapped="yes" component="qacpp" id="3241" />
            <message mapped="yes" component="qacpp" id="3707" />
            <message mapped="yes" component="certcppcm" id="5014" />
            <message mapped="yes" component="certcppcm" id="5016" />
            <message mapped="yes" component="qacpp" id="2116" />
            <message mapped="yes" component="qacpp" id="3402" />
            <message mapped="yes" component="qacpp" id="3403" />
            <message mapped="yes" component="qacpp" id="3404" />
            <message mapped="yes" component="qacpp" id="4072" />
            <message mapped="yes" component="qacpp" id="4073" />
            <message mapped="yes" component="certcppcm" id="5019" />
            <message mapped="yes" component="certcppcm" id="5021" />
            <message mapped="yes" component="certcppcm" id="5022" />
            <message mapped="yes" component="certcppcm" id="5023" />
            <message mapped="yes" component="certcppcm" id="5028" />
            <message mapped="yes" component="certcppcm" id="5031" />
            <message mapped="yes" component="qacpp" id="2181" />
            <message mapped="yes" component="qacpp" id="2121" />
            <message mapped="yes" component="qacpp" id="2020" />
            <message mapped="yes" component="qacpp" id="2135" />
            <message mapped="yes" component="qacpp" id="2136" />
            <message mapped="yes" component="qacpp" id="2653" />
            <message mapped="yes" component="qacpp" id="2654" />
            <message mapped="yes" component="qacpp" id="2659" />
            <message mapped="yes" component="qacpp" id="2051" />
            <message mapped="yes" component="qacpp" id="2074" />
            <message mapped="yes" component="qacpp" id="2093" />
            <message mapped="yes" component="qacpp" id="4620" />
            <message mapped="yes" component="qacpp" id="4621" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel5">
          <text>Severity Level 5</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="4649" />
            <message mapped="yes" component="qacpp" id="1052" />
            <message mapped="yes" component="qacpp" id="1051" />
            <message mapped="yes" component="qacpp" id="3604" />
            <message mapped="yes" component="qacpp" id="2641" />
            <message mapped="yes" component="qacpp" id="2642" />
            <message mapped="yes" component="qacpp" id="2050" />
            <message mapped="yes" component="rcma" id="1531" />
            <message mapped="yes" component="rcma" id="1533" />
            <message mapped="yes" component="qacpp" id="4113" />
            <message mapped="yes" component="qacpp" id="4114" />
            <message mapped="yes" component="qacpp" id="3122" />
            <message mapped="yes" component="qacpp" id="3700" />
            <message mapped="yes" component="qacpp" id="3702" />
            <message mapped="yes" component="qacpp" id="3703" />
            <message mapped="yes" component="qacpp" id="3054" />
            <message mapped="yes" component="qacpp" id="4077" />
            <message mapped="yes" component="qacpp" id="2424" />
            <message mapped="yes" component="qacpp" id="3701" />
            <message mapped="yes" component="qacpp" id="3360" />
            <message mapped="yes" component="qacpp" id="3361" />
            <message mapped="yes" component="qacpp" id="3362" />
            <message mapped="yes" component="qacpp" id="3363" />
            <message mapped="yes" component="qacpp" id="3364" />
            <message mapped="yes" component="qacpp" id="3365" />
            <message mapped="yes" component="qacpp" id="3366" />
            <message mapped="yes" component="qacpp" id="3367" />
            <message mapped="yes" component="qacpp" id="3368" />
            <message mapped="yes" component="qacpp" id="3369" />
            <message mapped="yes" component="qacpp" id="3370" />
            <message mapped="yes" component="qacpp" id="3371" />
            <message mapped="yes" component="qacpp" id="3340" />
            <message mapped="yes" component="qacpp" id="3341" />
            <message mapped="yes" component="qacpp" id="3348" />
            <message mapped="yes" component="qacpp" id="3349" />
            <message mapped="yes" component="qacpp" id="3352" />
            <message mapped="yes" component="qacpp" id="3353" />
            <message mapped="yes" component="qacpp" id="4294" />
            <message mapped="yes" component="qacpp" id="4299" />
            <message mapped="yes" component="qacpp" id="4680" />
            <message mapped="yes" component="qacpp" id="4681" />
            <message mapped="yes" component="qacpp" id="4235" />
            <message mapped="yes" component="qacpp" id="4295" />
            <message mapped="yes" component="qacpp" id="4296" />
            <message mapped="yes" component="qacpp" id="4297" />
            <message mapped="yes" component="qacpp" id="4298" />
            <message mapped="yes" component="qacpp" id="4682" />
            <message mapped="yes" component="qacpp" id="4683" />
            <message mapped="yes" component="qacpp" id="4684" />
            <message mapped="yes" component="qacpp" id="4685" />
            <message mapped="yes" component="qacpp" id="4231" />
            <message mapped="yes" component="qacpp" id="4290" />
            <message mapped="yes" component="qacpp" id="4292" />
            <message mapped="yes" component="qacpp" id="4600" />
            <message mapped="yes" component="qacpp" id="4117" />
            <message mapped="yes" component="qacpp" id="4119" />
            <message mapped="yes" component="qacpp" id="2518" />
            <message mapped="yes" component="qacpp" id="2519" />
            <message mapped="yes" component="qacpp" id="2520" />
            <message mapped="yes" component="qacpp" id="2522" />
            <message mapped="yes" component="qacpp" id="2525" />
            <message mapped="yes" component="qacpp" id="2526" />
            <message mapped="yes" component="qacpp" id="2521" />
            <message mapped="yes" component="qacpp" id="2523" />
            <message mapped="yes" component="qacpp" id="2524" />
            <message mapped="yes" component="qacpp" id="4107" />
            <message mapped="yes" component="qacpp" id="4108" />
            <message mapped="yes" component="qacpp" id="4109" />
            <message mapped="yes" component="qacpp" id="4110" />
            <message mapped="yes" component="qacpp" id="3058" />
            <message mapped="yes" component="qacpp" id="3059" />
            <message mapped="yes" component="qacpp" id="2412" />
            <message mapped="yes" component="qacpp" id="2416" />
            <message mapped="yes" component="qacpp" id="2417" />
            <message mapped="yes" component="qacpp" id="2418" />
            <message mapped="yes" component="qacpp" id="2420" />
            <message mapped="yes" component="qacpp" id="2421" />
            <message mapped="yes" component="qacpp" id="2422" />
            <message mapped="yes" component="qacpp" id="2127" />
            <message mapped="yes" component="qacpp" id="2128" />
            <message mapped="yes" component="qacpp" id="2129" />
            <message mapped="yes" component="qacpp" id="2126" />
            <message mapped="yes" component="qacpp" id="3800" />
            <message mapped="yes" component="qacpp" id="1110" />
            <message mapped="yes" component="qacpp" id="1111" />
            <message mapped="yes" component="qacpp" id="3224" />
            <message mapped="yes" component="qacpp" id="4687" />
            <message mapped="yes" component="qacpp" id="4327" />
            <message mapped="yes" component="qacpp" id="1107" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel4">
          <text>Severity Level 4</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="2406" />
            <message mapped="yes" component="qacpp" id="2407" />
            <message mapped="yes" component="qacpp" id="3017" />
            <message mapped="yes" component="qacpp" id="4500" />
            <message mapped="yes" component="qacpp" id="4062" />
            <message mapped="yes" component="qacpp" id="4063" />
            <message mapped="yes" component="qacpp" id="4064" />
            <message mapped="yes" component="qacpp" id="4065" />
            <message mapped="yes" component="qacpp" id="4066" />
            <message mapped="yes" component="qacpp" id="4068" />
            <message mapped="yes" component="qacpp" id="4060" />
            <message mapped="yes" component="qacpp" id="4061" />
            <message mapped="yes" component="qacpp" id="4070" />
            <message mapped="yes" component="qacpp" id="4013" />
            <message mapped="yes" component="qacpp" id="4010" />
            <message mapped="yes" component="qacpp" id="4012" />
            <message mapped="yes" component="qacpp" id="4015" />
            <message mapped="yes" component="qacpp" id="4016" />
            <message mapped="yes" component="qacpp" id="1038" />
            <message mapped="yes" component="qacpp" id="1039" />
            <message mapped="yes" component="qacpp" id="3033" />
            <message mapped="yes" component="qacpp" id="3038" />
            <message mapped="yes" component="qacpp" id="3030" />
            <message mapped="yes" component="qacpp" id="2139" />
            <message mapped="yes" component="qacpp" id="4000" />
            <message mapped="yes" component="qacpp" id="3031" />
            <message mapped="yes" component="qacpp" id="1024" />
            <message mapped="yes" component="qacpp" id="2325" />
            <message mapped="yes" component="qacpp" id="2655" />
            <message mapped="yes" component="qacpp" id="2656" />
            <message mapped="yes" component="qacpp" id="2657" />
            <message mapped="yes" component="qacpp" id="2326" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel3">
          <text>Severity Level 3</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="1092" />
            <message mapped="yes" component="qacpp" id="1093" />
            <message mapped="yes" component="qacpp" id="3600" />
            <message mapped="yes" component="qacpp" id="2077" />
            <message mapped="yes" component="qacpp" id="2078" />
            <message mapped="yes" component="qacpp" id="2079" />
            <message mapped="yes" component="qacpp" id="2302" />
            <message mapped="yes" component="rcma" id="1730" />
            <message mapped="yes" component="qacpp" id="3880" />
            <message mapped="yes" component="qacpp" id="3881" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel2">
          <text>Severity Level 2</text>
          <enforcement>
            <message mapped="yes" component="qacpp" id="2664" />
            <message mapped="yes" component="qacpp" id="2665" />
            <message mapped="yes" component="qacpp" id="2666" />
            <message mapped="yes" component="qacpp" id="2000" />
            <message mapped="yes" component="qacpp" id="2300" />
            <message mapped="yes" component="qacpp" id="2400" />
            <message mapped="yes" component="qacpp" id="2017" />
            <message mapped="yes" component="qacpp" id="4211" />
            <message mapped="yes" component="qacpp" id="4212" />
            <message mapped="yes" component="qacpp" id="2650" />
            <message mapped="yes" component="qacpp" id="2100" />
            <message mapped="yes" component="qacpp" id="2101" />
            <message mapped="yes" component="qacpp" id="1020" />
            <message mapped="yes" component="qacpp" id="1021" />
            <message mapped="yes" component="qacpp" id="1025" />
            <message mapped="yes" component="qacpp" id="1026" />
            <message mapped="yes" component="qacpp" id="1014" />
            <message mapped="yes" component="qacpp" id="4122" />
            <message mapped="yes" component="qacpp" id="2193" />
            <message mapped="yes" component="qacpp" id="2194" />
            <message mapped="yes" component="qacpp" id="2107" />
            <message mapped="yes" component="qacpp" id="2008" />
            <message mapped="yes" component="qacpp" id="2009" />
            <message mapped="yes" component="qacpp" id="2016" />
            <message mapped="yes" component="qacpp" id="2171" />
            <message mapped="yes" component="qacpp" id="2173" />
            <message mapped="yes" component="qacpp" id="2175" />
            <message mapped="yes" component="qacpp" id="3080" />
            <message mapped="yes" component="qacpp" id="3082" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel1">
          <text>Severity Level 1</text>
          <enforcement>
            <message mapped="yes" component="rcma" id="1503" />
            <message mapped="yes" component="rcma" id="1508" />
            <message mapped="yes" component="rcma" id="1512" />
            <message mapped="yes" component="rcma" id="1703" />
            <message mapped="yes" component="qacpp" id="1036" />
            <message mapped="yes" component="qacpp" id="1016" />
            <message mapped="yes" component="qacpp" id="1017" />
            <message mapped="yes" component="qacpp" id="4230" />
            <message mapped="yes" component="qacpp" id="1094" />
            <message mapped="yes" component="qacpp" id="2108" />
            <message mapped="yes" component="qacpp" id="2109" />
            <message mapped="yes" component="qacpp" id="2191" />
            <message mapped="yes" component="qacpp" id="2192" />
            <message mapped="yes" component="qacpp" id="2195" />
            <message mapped="yes" component="namecheck" id="4801" />
            <message mapped="yes" component="namecheck" id="4802" />
            <message mapped="yes" component="namecheck" id="4803" />
            <message mapped="yes" component="namecheck" id="4804" />
            <message mapped="yes" component="namecheck" id="4805" />
          </enforcement>
        </rule>
        <rule help="" active="yes" id="severitylevel0">
          <text>Severity Level 0</text>
          <enforcement>
            <message mapped="yes" component="rcma" id="1755" />
            <message mapped="yes" component="qacpp" id="2778" />
            <message mapped="yes" component="qacpp" id="2793" />
            <message mapped="yes" component="qacpp" id="2803" />
            <message mapped="yes" component="qacpp" id="2813" />
            <message mapped="yes" component="qacpp" id="2823" />
            <message mapped="yes" component="qacpp" id="2833" />
            <message mapped="yes" component="qacpp" id="2843" />
            <message mapped="yes" component="qacpp" id="2863" />
            <message mapped="yes" component="qacpp" id="2925" />
            <message mapped="yes" component="qacpp" id="2926" />
            <message mapped="yes" component="qacpp" id="2938" />
            <message mapped="yes" component="qacpp" id="2963" />
            <message mapped="yes" component="qacpp" id="2973" />
            <message mapped="yes" component="mcpp" id="5053" />
            <message mapped="yes" component="qacpp" id="4141" />
            <message mapped="yes" component="qacpp" id="4142" />
            <message mapped="yes" component="qacpp" id="3222" />
            <message mapped="yes" component="qacpp" id="3223" />
            <message mapped="yes" component="qacpp" id="2933" />
            <message mapped="yes" component="qacpp" id="2773" />
            <message mapped="yes" component="qacpp" id="2913" />
            <message mapped="yes" component="qacpp" id="2516" />
            <message mapped="yes" component="qacpp" id="4690" />
            <message mapped="yes" component="mcpp" id="5026" />
            <message mapped="yes" component="qacpp" id="2528" />
            <message mapped="yes" component="qacpp" id="4629" />
            <message mapped="yes" component="qacpp" id="2968" />
            <message mapped="yes" component="qacpp" id="2978" />
            <message mapped="yes" component="qacpp" id="2814" />
            <message mapped="yes" component="qacpp" id="2934" />
            <message mapped="yes" component="qacpp" id="2824" />
            <message mapped="yes" component="qacpp" id="2853" />
            <message mapped="yes" component="qacpp" id="2858" />
            <message mapped="yes" component="qacpp" id="2893" />
            <message mapped="yes" component="qacpp" id="2898" />
            <message mapped="yes" component="qacpp" id="2903" />
            <message mapped="yes" component="qacpp" id="2908" />
            <message mapped="yes" component="qacpp" id="2834" />
            <message mapped="yes" component="qacpp" id="2763" />
            <message mapped="yes" component="qacpp" id="2844" />
            <message mapped="yes" component="qacpp" id="2939" />
            <message mapped="yes" component="qacpp" id="2848" />
            <message mapped="yes" component="qacpp" id="2849" />
            <message mapped="yes" component="ascm" id="5210" />
            <message mapped="yes" component="qacpp" id="0098" />
            <message mapped="yes" component="qacpp" id="0099" />
            <message mapped="yes" component="qacpp" id="0622" />
            <message mapped="yes" component="qacpp" id="1153" />
          </enforcement>
        </rule>
      </enforcement>
    </rule>
  </rulegroup>
</rcf>